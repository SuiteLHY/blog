<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dunwu</title>
  
  <subtitle>大道至简，知易行难</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://dunwu.github.io/blog/"/>
  <updated>2019-08-21T05:20:27.895Z</updated>
  <id>https://dunwu.github.io/blog/</id>
  
  <author>
    <name>Zhang Peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式技术面试题</title>
    <link href="https://dunwu.github.io/blog/design/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://dunwu.github.io/blog/design/architecture/%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2019-10-25T06:31:53.508Z</published>
    <updated>2019-08-21T05:20:27.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式技术面试题"><a class="markdownIt-Anchor" href="#分布式技术面试题"></a> 分布式技术面试题</h1><!-- TOC depthFrom:2 depthTo:3 --><ul><li><a href="#1-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98">1. 分布式缓存</a><ul><li><a href="#11-redis-%E6%9C%89%E4%BB%80%E4%B9%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%86%E5%88%AB%E7%94%A8%E4%BA%8E%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF">1.1. Redis 有什么数据类型？分别用于什么场景？</a></li><li><a href="#12-redis-%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84">1.2. Redis 的主从复制是如何实现的？</a></li><li><a href="#13-redis-%E7%9A%84-key-%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%BB%E5%9D%80%E7%9A%84">1.3. Redis 的 key 是如何寻址的？</a></li><li><a href="#14-redis-%E7%9A%84%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84">1.4. Redis 的集群模式是如何实现的？</a></li><li><a href="#15-redis-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81zookeeper-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%AF%94%E8%BE%83%E4%BA%8C%E8%80%85%E4%BC%98%E5%8A%A3">1.5. Redis 如何实现分布式锁？ZooKeeper 如何实现分布式锁？比较二者优劣？</a></li><li><a href="#16-redis-%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9%E6%8C%81%E4%B9%85%E5%8C%96%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">1.6. Redis 的持久化方式？有什么优缺点？持久化实现原理？</a></li><li><a href="#17-redis-%E8%BF%87%E6%9C%9F%E7%AD%96%E7%95%A5%E6%9C%89%E5%93%AA%E4%BA%9B">1.7. Redis 过期策略有哪些？</a></li><li><a href="#18-redis-%E5%92%8C-memcached-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">1.8. Redis 和 Memcached 有什么区别？</a></li><li><a href="#19-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84-redis-%E6%80%A7%E8%83%BD%E5%8F%8D%E8%80%8C%E4%BC%98%E4%BA%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84-memcached">1.9. 为什么单线程的 Redis 性能反而优于多线程的 Memcached？</a></li></ul></li><li><a href="#2-%E5%88%86%E5%B8%83%E5%BC%8F%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97mq">2. 分布式消息队列（MQ）</a><ul><li><a href="#21-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8-mq">2.1. 为什么使用 MQ？</a></li><li><a href="#22-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81-mq-%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8">2.2. 如何保证 MQ 的高可用？</a></li><li><a href="#23-mq-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98">2.3. MQ 有哪些常见问题？如何解决这些问题？</a></li><li><a href="#24-kafka-activemq-rabbitmq-rocketmq-%E5%90%84%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9">2.4. Kafka, ActiveMQ, RabbitMQ, RocketMQ 各有什么优缺点？</a></li></ul></li><li><a href="#3-%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1rpc">3. 分布式服务（RPC）</a><ul><li><a href="#31-dubbo-%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">3.1. Dubbo 的实现过程？</a></li><li><a href="#32-dubbo-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E6%9C%89%E5%93%AA%E4%BA%9B">3.2. Dubbo 负载均衡策略有哪些？</a></li><li><a href="#33-dubbo-%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99%E7%AD%96%E7%95%A5-">3.3. Dubbo 集群容错策略 ？</a></li><li><a href="#34-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%AD%96%E7%95%A5">3.4. 动态代理策略？</a></li><li><a href="#35-dubbo-%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AEhessianhessian-%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">3.5. Dubbo 支持哪些序列化协议？Hessian？Hessian 的数据结构？</a></li><li><a href="#36-protoco-buffer-%E6%98%AF%E4%BB%80%E4%B9%88">3.6. Protoco Buffer 是什么？</a></li><li><a href="#37-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E6%8C%82%E4%BA%86%E5%8F%AF%E4%BB%A5%E7%BB%A7%E7%BB%AD%E9%80%9A%E4%BF%A1%E5%90%97">3.7. 注册中心挂了可以继续通信吗？</a></li><li><a href="#38-zookeeper-%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88zookeeper-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8">3.8. ZooKeeper 原理是什么？ZooKeeper 有什么用？</a></li><li><a href="#39-netty-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8niobioaio-%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">3.9. Netty 有什么用？NIO/BIO/AIO 有什么用？有什么区别？</a></li><li><a href="#310-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%9B%E8%A1%8C%E7%B3%BB%E7%BB%9F%E6%8B%86%E5%88%86%E6%8B%86%E5%88%86%E4%B8%8D%E7%94%A8-dubbo-%E5%8F%AF%E4%BB%A5%E5%90%97">3.10. 为什么要进行系统拆分？拆分不用 Dubbo 可以吗？</a></li><li><a href="#311-dubbo-%E5%92%8C-thrift-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">3.11. Dubbo 和 Thrift 有什么区别？</a></li></ul></li></ul><!-- /TOC --><h2 id="1-分布式缓存"><a class="markdownIt-Anchor" href="#1-分布式缓存"></a> 1. 分布式缓存</h2><h3 id="11-redis-有什么数据类型分别用于什么场景"><a class="markdownIt-Anchor" href="#11-redis-有什么数据类型分别用于什么场景"></a> 1.1. Redis 有什么数据类型？分别用于什么场景？</h3><table><thead><tr><th>数据类型</th><th>可以存储的值</th><th>操作</th></tr></thead><tbody><tr><td>STRING</td><td>字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作</br> 对整数和浮点数执行自增或者自减操作</td></tr><tr><td>LIST</td><td>列表</td><td>从两端压入或者弹出元素</br> 读取单个或者多个元素</br> 进行修剪，只保留一个范围内的元素</td></tr><tr><td>SET</td><td>无序集合</td><td>添加、获取、移除单个元素</br> 检查一个元素是否存在于集合中</br> 计算交集、并集、差集</br> 从集合里面随机获取元素</td></tr><tr><td>HASH</td><td>包含键值对的无序散列表</td><td>添加、获取、移除单个键值对</br> 获取所有键值对</br> 检查某个键是否存在</td></tr><tr><td>ZSET</td><td>有序集合</td><td>添加、获取、删除元素</br> 根据分值范围或者成员来获取元素</br> 计算一个键的排名</td></tr></tbody></table><blockquote><p><a href="https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/" target="_blank" rel="noopener">What Redis data structures look like</a></p></blockquote><h3 id="12-redis-的主从复制是如何实现的"><a class="markdownIt-Anchor" href="#12-redis-的主从复制是如何实现的"></a> 1.2. Redis 的主从复制是如何实现的？</h3><ol><li>从服务器连接主服务器，发送 SYNC 命令；</li><li>主服务器接收到 SYNC 命名后，开始执行 BGSAVE 命令生成 RDB 文件并使用缓冲区记录此后执行的所有写命令；</li><li>主服务器 BGSAVE 执行完后，向所有从服务器发送快照文件，并在发送期间继续记录被执行的写命令；</li><li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照；</li><li>主服务器快照发送完毕后开始向从服务器发送缓冲区中的写命令；</li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令；</li></ol><h3 id="13-redis-的-key-是如何寻址的"><a class="markdownIt-Anchor" href="#13-redis-的-key-是如何寻址的"></a> 1.3. Redis 的 key 是如何寻址的？</h3><h4 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h4><p>（1）redis 中的每一个数据库，都由一个 redisDb 的结构存储。其中：</p><ul><li><a href="http://redisDb.id" target="_blank" rel="noopener">redisDb.id</a> 存储着 redis 数据库以整数表示的号码。</li><li>redisDb.dict 存储着该库所有的键值对数据。</li><li>redisDb.expires 保存着每一个键的过期时间。</li></ul><p>（2）当 redis 服务器初始化时，会预先分配 16 个数据库（该数量可以通过配置文件配置），所有数据库保存到结构 redisServer 的一个成员 redisServer.db 数组中。当我们选择数据库 select number 时，程序直接通过 redisServer.db[number] 来切换数据库。有时候当程序需要知道自己是在哪个数据库时，直接读取 <a href="http://redisDb.id" target="_blank" rel="noopener">redisDb.id</a> 即可。</p><p>（3）redis 的字典使用哈希表作为其底层实现。dict 类型使用的两个指向哈希表的指针，其中 0 号哈希表（ht[0]）主要用于存储数据库的所有键值，而 1 号哈希表主要用于程序对 0 号哈希表进行 rehash 时使用，rehash 一般是在添加新值时会触发，这里不做过多的赘述。所以 redis 中查找一个 key，其实就是对进行该 dict 结构中的 ht[0] 进行查找操作。</p><p>（4）既然是哈希，那么我们知道就会有哈希碰撞，那么当多个键哈希之后为同一个值怎么办呢？redis 采取链表的方式来存储多个哈希碰撞的键。也就是说，当根据 key 的哈希值找到该列表后，如果列表的长度大于 1，那么我们需要遍历该链表来找到我们所查找的 key。当然，一般情况下链表长度都为是 1，所以时间复杂度可看作 o(1)。</p><h4 id="寻址-key-的步骤"><a class="markdownIt-Anchor" href="#寻址-key-的步骤"></a> 寻址 key 的步骤</h4><ol><li>当拿到一个 key 后，redis 先判断当前库的 0 号哈希表是否为空，即：if (dict-&gt;ht[0].size == 0)。如果为 true 直接返回 NULL。</li><li>判断该 0 号哈希表是否需要 rehash，因为如果在进行 rehash，那么两个表中者有可能存储该 key。如果正在进行 rehash，将调用一次_dictRehashStep 方法，_dictRehashStep 用于对数据库字典、以及哈希键的字典进行被动 rehash，这里不作赘述。</li><li>计算哈希表，根据当前字典与 key 进行哈希值的计算。</li><li>根据哈希值与当前字典计算哈希表的索引值。</li><li>根据索引值在哈希表中取出链表，遍历该链表找到 key 的位置。一般情况，该链表长度为 1。</li><li>当 ht[0] 查找完了之后，再进行了次 rehash 判断，如果未在 rehashing，则直接结束，否则对 ht[1]重复 345 步骤。</li></ol><h3 id="14-redis-的集群模式是如何实现的"><a class="markdownIt-Anchor" href="#14-redis-的集群模式是如何实现的"></a> 1.4. Redis 的集群模式是如何实现的？</h3><p>Redis Cluster 是 Redis 的分布式解决方案，在 Redis 3.0 版本正式推出的。</p><p>Redis Cluster 去中心化，每个节点保存数据和整个集群状态，每个节点都和其他所有节点连接。</p><h4 id="redis-cluster-节点分配"><a class="markdownIt-Anchor" href="#redis-cluster-节点分配"></a> Redis Cluster 节点分配</h4><p>Redis Cluster 特点：</p><ol><li>所有的 redis 节点彼此互联(PING-PONG 机制)，内部使用二进制协议优化传输速度和带宽。</li><li>节点的 fail 是通过集群中超过半数的节点检测失效时才生效。</li><li>客户端与 redis 节点直连,不需要中间 proxy 层。客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</li><li>redis-cluster 把所有的物理节点映射到[0-16383] 哈希槽 (hash slot)上（不一定是平均分配）,cluster 负责维护 node、slot、value。</li><li>Redis 集群预分好 16384 个桶，当需要在 Redis 集群中放置一个 key-value 时，根据 CRC16(key) mod 16384 的值，决定将一个 key 放到哪个桶中。</li></ol><h4 id="redis-cluster-主从模式"><a class="markdownIt-Anchor" href="#redis-cluster-主从模式"></a> Redis Cluster 主从模式</h4><p>Redis Cluster 为了保证数据的高可用性，加入了主从模式。</p><p>一个主节点对应一个或多个从节点，主节点提供数据存取，从节点则是从主节点拉取数据备份。当这个主节点挂掉后，就会有这个从节点选取一个来充当主节点，从而保证集群不会挂掉。所以，在集群建立的时候，一定要为每个主节点都添加了从节点。</p><h4 id="redis-sentinel"><a class="markdownIt-Anchor" href="#redis-sentinel"></a> Redis Sentinel</h4><p>Redis Sentinel 用于管理多个 Redis 服务器，它有三个功能：</p><ul><li><strong>监控（Monitoring）</strong> - Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</li><li><strong>提醒（Notification）</strong> - 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</li><li><strong>自动故障迁移（Automatic failover）</strong> - 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时， 集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。</li></ul><p>Redis 集群中应该有奇数个节点，所以至少有三个节点。</p><p>哨兵监控集群中的主服务器出现故障时，需要根据 quorum 选举出一个哨兵来执行故障转移。选举需要 majority，即大多数哨兵是运行的（2 个哨兵的 majority=2，3 个哨兵的 majority=2，5 个哨兵的 majority=3，4 个哨兵的 majority=2）。</p><p>假设集群仅仅部署 2 个节点</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+----+         +----+</span><br><span class="line">|<span class="string"> M1 </span>|<span class="string">---------</span>|<span class="string"> R1 </span>|</span><br><span class="line">|<span class="string"> S1 </span>|<span class="string">         </span>|<span class="string"> S2 </span>|</span><br><span class="line">+----+         +----+</span><br></pre></td></tr></table></figure><p>如果 M1 和 S1 所在服务器宕机，则哨兵只有 1 个，无法满足 majority 来进行选举，就不能执行故障转移。</p><h3 id="15-redis-如何实现分布式锁zookeeper-如何实现分布式锁比较二者优劣"><a class="markdownIt-Anchor" href="#15-redis-如何实现分布式锁zookeeper-如何实现分布式锁比较二者优劣"></a> 1.5. Redis 如何实现分布式锁？ZooKeeper 如何实现分布式锁？比较二者优劣？</h3><p>分布式锁的三种实现：</p><ul><li>基于数据库实现分布式锁；</li><li>基于缓存（Redis 等）实现分布式锁；</li><li>基于 Zookeeper 实现分布式锁；</li></ul><h4 id="数据库实现"><a class="markdownIt-Anchor" href="#数据库实现"></a> 数据库实现</h4><h4 id="redis-实现"><a class="markdownIt-Anchor" href="#redis-实现"></a> Redis 实现</h4><ol><li>获取锁的时候，使用 setnx 加锁，并使用 expire 命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的 value 值为一个随机生成的 UUID，通过此在释放锁的时候进行判断。</li><li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li><li>释放锁的时候，通过 UUID 判断是不是该锁，若是该锁，则执行 delete 进行锁释放。</li></ol><h4 id="zookeeper-实现"><a class="markdownIt-Anchor" href="#zookeeper-实现"></a> ZooKeeper 实现</h4><ol><li>创建一个目录 mylock；</li><li>线程 A 想获取锁就在 mylock 目录下创建临时顺序节点；</li><li>获取 mylock 目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁；</li><li>线程 B 获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；</li><li>线程 A 处理完，删除自己的节点，线程 B 监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</li></ol><h4 id="实现对比"><a class="markdownIt-Anchor" href="#实现对比"></a> 实现对比</h4><p>ZooKeeper 具备高可用、可重入、阻塞锁特性，可解决失效死锁问题。<br />但 ZooKeeper 因为需要频繁的创建和删除节点，性能上不如 Redis 方式。</p><h3 id="16-redis-的持久化方式有什么优缺点持久化实现原理"><a class="markdownIt-Anchor" href="#16-redis-的持久化方式有什么优缺点持久化实现原理"></a> 1.6. Redis 的持久化方式？有什么优缺点？持久化实现原理？</h3><h4 id="rdb-快照snapshot"><a class="markdownIt-Anchor" href="#rdb-快照snapshot"></a> RDB 快照（snapshot）</h4><p>将存在于某一时刻的所有数据都写入到硬盘中。</p><h5 id="快照的原理"><a class="markdownIt-Anchor" href="#快照的原理"></a> 快照的原理</h5><p>在默认情况下，Redis 将数据库快照保存在名字为 dump.rdb 的二进制文件中。你可以对 Redis 进行设置， 让它在“N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动保存一次数据集。你也可以通过调用 SAVE 或者 BGSAVE，手动让 Redis 进行数据集保存操作。这种持久化方式被称为快照。</p><p>当 Redis 需要保存 dump.rdb 文件时， 服务器执行以下操作:</p><ul><li>Redis 创建一个子进程。</li><li>子进程将数据集写入到一个临时快照文件中。</li><li>当子进程完成对新快照文件的写入时，Redis 用新快照文件替换原来的快照文件，并删除旧的快照文件。</li></ul><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。</p><h5 id="快照的优点"><a class="markdownIt-Anchor" href="#快照的优点"></a> 快照的优点</h5><ul><li>它保存了某个时间点的数据集，非常适用于数据集的备份。</li><li>很方便传送到另一个远端数据中心或者亚马逊的 S3（可能加密），非常适用于灾难恢复。</li><li>快照在保存 RDB 文件时父进程唯一需要做的就是 fork 出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他 IO 操作，所以快照持久化方式可以最大化 redis 的性能。</li><li>与 AOF 相比，在恢复大的数据集的时候，DB 方式会更快一些。</li></ul><h5 id="快照的缺点"><a class="markdownIt-Anchor" href="#快照的缺点"></a> 快照的缺点</h5><ul><li>如果你希望在 redis 意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么快照不适合你。</li><li>快照需要经常 fork 子进程来保存数据集到硬盘上。当数据集比较大的时候，fork 的过程是非常耗时的，可能会导致 Redis 在一些毫秒级内不能响应客户端的请求。</li></ul><h4 id="aof"><a class="markdownIt-Anchor" href="#aof"></a> AOF</h4><p>AOF 持久化方式记录每次对服务器执行的写操作。当服务器重启的时候会重新执行这些命令来恢复原始的数据。</p><h4 id="aof-的原理"><a class="markdownIt-Anchor" href="#aof-的原理"></a> AOF 的原理</h4><ul><li>Redis 创建一个子进程。</li><li>子进程开始将新 AOF 文件的内容写入到临时文件。</li><li>对于所有新执行的写入命令，父进程一边将它们累积到一个内存缓存中，一边将这些改动追加到现有 AOF 文件的末尾，这样样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。</li><li>当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。</li><li>搞定！现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。</li></ul><h4 id="aof-的优点"><a class="markdownIt-Anchor" href="#aof-的优点"></a> AOF 的优点</h4><ul><li>使用默认的每秒 fsync 策略，Redis 的性能依然很好(fsync 是由后台线程进行处理的,主线程会尽力处理客户端请求)，一旦出现故障，使用 AOF ，你最多丢失 1 秒的数据。</li><li>AOF 文件是一个只进行追加的日志文件，所以不需要写入 seek，即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令，你也也可使用 redis-check-aof 工具修复这些问题。</li><li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写：重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的。</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作，这些写入操作以 Redis 协议的格式保存。因此 AOF 文件的内容非常容易被人读懂，对文件进行分析（parse）也很轻松。</li></ul><h4 id="aof-的缺点"><a class="markdownIt-Anchor" href="#aof-的缺点"></a> AOF 的缺点</h4><ul><li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li><li>根据所使用的 fsync 策略，AOF 的速度可能会慢于快照。在一般情况下，每秒 fsync 的性能依然非常高，而关闭 fsync 可以让 AOF 的速度和快照一样快，即使在高负荷之下也是如此。不过在处理巨大的写入载入时，快照可以提供更有保证的最大延迟时间（latency）。</li></ul><h3 id="17-redis-过期策略有哪些"><a class="markdownIt-Anchor" href="#17-redis-过期策略有哪些"></a> 1.7. Redis 过期策略有哪些？</h3><ul><li><strong>noeviction</strong> - 当内存使用达到阈值的时候，所有引起申请内存的命令会报错。</li><li><strong>allkeys-lru</strong> - 在主键空间中，优先移除最近未使用的 key。</li><li><strong>allkeys-random</strong> - 在主键空间中，随机移除某个 key。</li><li><strong>volatile-lru</strong> - 在设置了过期时间的键空间中，优先移除最近未使用的 key。</li><li><strong>volatile-random</strong> - 在设置了过期时间的键空间中，随机移除某个 key。</li><li><strong>volatile-ttl</strong> - 在设置了过期时间的键空间中，具有更早过期时间的 key 优先移除。</li></ul><h3 id="18-redis-和-memcached-有什么区别"><a class="markdownIt-Anchor" href="#18-redis-和-memcached-有什么区别"></a> 1.8. Redis 和 Memcached 有什么区别？</h3><p>两者都是非关系型内存键值数据库。有以下主要不同：</p><p><strong>数据类型</strong></p><ul><li>Memcached 仅支持字符串类型；</li><li>而 Redis 支持五种不同种类的数据类型，使得它可以更灵活地解决问题。</li></ul><p><strong>数据持久化</strong></p><ul><li>Memcached 不支持持久化；</li><li>Redis 支持两种持久化策略：RDB 快照和 AOF 日志。</li></ul><p><strong>分布式</strong></p><ul><li>Memcached 不支持分布式，只能通过在客户端使用像一致性哈希这样的分布式算法来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</li><li>Redis Cluster 实现了分布式的支持。</li></ul><p><strong>内存管理机制</strong></p><ul><li>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题，但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</li><li>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘。而 Memcached 的数据则会一直在内存中。</li></ul><h3 id="19-为什么单线程的-redis-性能反而优于多线程的-memcached"><a class="markdownIt-Anchor" href="#19-为什么单线程的-redis-性能反而优于多线程的-memcached"></a> 1.9. 为什么单线程的 Redis 性能反而优于多线程的 Memcached？</h3><p>Redis 快速的原因：</p><ol><li>绝大部分请求是纯粹的内存操作（非常快速）</li><li>采用单线程,避免了不必要的上下文切换和竞争条件</li><li>非阻塞 IO</li></ol><p>内部实现采用 epoll，采用了 epoll+自己实现的简单的事件框架。epoll 中的读、写、关闭、连接都转化成了事件，然后利用 epoll 的多路复用特性，绝不在 io 上浪费一点时间。</p><h2 id="2-分布式消息队列mq"><a class="markdownIt-Anchor" href="#2-分布式消息队列mq"></a> 2. 分布式消息队列（MQ）</h2><h3 id="21-为什么使用-mq"><a class="markdownIt-Anchor" href="#21-为什么使用-mq"></a> 2.1. 为什么使用 MQ？</h3><ul><li>异步处理 - 相比于传统的串行、并行方式，提高了系统吞吐量。</li><li>应用解耦 - 系统间通过消息通信，不用关心其他系统的处理。</li><li>流量削锋 - 可以通过消息队列长度控制请求量；可以缓解短时间内的高并发请求。</li><li>日志处理 - 解决大量日志传输。</li><li>消息通讯 - 消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</li></ul><h3 id="22-如何保证-mq-的高可用"><a class="markdownIt-Anchor" href="#22-如何保证-mq-的高可用"></a> 2.2. 如何保证 MQ 的高可用？</h3><h4 id="数据复制"><a class="markdownIt-Anchor" href="#数据复制"></a> 数据复制</h4><ol><li>将所有 Broker 和待分配的 Partition 排序</li><li>将第 i 个 Partition 分配到第（i mod n）个 Broker 上</li><li>将第 i 个 Partition 的第 j 个 Replica 分配到第（(i + j) mode n）个 Broker 上</li></ol><h4 id="选举主服务器"><a class="markdownIt-Anchor" href="#选举主服务器"></a> 选举主服务器</h4><h3 id="23-mq-有哪些常见问题如何解决这些问题"><a class="markdownIt-Anchor" href="#23-mq-有哪些常见问题如何解决这些问题"></a> 2.3. MQ 有哪些常见问题？如何解决这些问题？</h3><p>MQ 的常见问题有：</p><ol><li>消息的顺序问题</li><li>消息的重复问题</li></ol><h4 id="消息的顺序问题"><a class="markdownIt-Anchor" href="#消息的顺序问题"></a> 消息的顺序问题</h4><p>消息有序指的是可以按照消息的发送顺序来消费。</p><p>假如生产者产生了 2 条消息：M1、M2，假定 M1 发送到 S1，M2 发送到 S2，如果要保证 M1 先于 M2 被消费，怎么做？</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/3101171-23145c8b554a0f2f.jpg"/></div><p>解决方案：</p><p>（1）保证生产者 - MQServer - 消费者是一对一对一的关系</p><div align="center"><img src="http://upload-images.jianshu.io/upload_images/3101171-034106d7e04c062d.jpg"/></div><p>缺陷：</p><ul><li>并行度就会成为消息系统的瓶颈（吞吐量不够）</li><li>更多的异常处理，比如：只要消费端出现问题，就会导致整个处理流程阻塞，我们不得不花费更多的精力来解决阻塞的问题。</li></ul><p>（2）通过合理的设计或者将问题分解来规避。</p><ul><li>不关注乱序的应用实际大量存在</li><li>队列无序并不意味着消息无序</li></ul><p>所以从业务层面来保证消息的顺序而不仅仅是依赖于消息系统，是一种更合理的方式。</p><h4 id="消息的重复问题"><a class="markdownIt-Anchor" href="#消息的重复问题"></a> 消息的重复问题</h4><p>造成消息重复的根本原因是：网络不可达。</p><p>所以解决这个问题的办法就是绕过这个问题。那么问题就变成了：如果消费端收到两条一样的消息，应该怎样处理？</p><p>消费端处理消息的业务逻辑保持幂等性。只要保持幂等性，不管来多少条重复消息，最后处理的结果都一样。<br />保证每条消息都有唯一编号且保证消息处理成功与去重表的日志同时出现。利用一张日志表来记录已经处理成功的消息的 ID，如果新到的消息 ID 已经在日志表中，那么就不再处理这条消息。</p><h3 id="24-kafka-activemq-rabbitmq-rocketmq-各有什么优缺点"><a class="markdownIt-Anchor" href="#24-kafka-activemq-rabbitmq-rocketmq-各有什么优缺点"></a> 2.4. Kafka, ActiveMQ, RabbitMQ, RocketMQ 各有什么优缺点？</h3><div align="center"><img src="http://upload-images.jianshu.io/upload_images/3101171-c26f4a3048c38af4.jpg"/></div><h2 id="3-分布式服务rpc"><a class="markdownIt-Anchor" href="#3-分布式服务rpc"></a> 3. 分布式服务（RPC）</h2><h3 id="31-dubbo-的实现过程"><a class="markdownIt-Anchor" href="#31-dubbo-的实现过程"></a> 3.1. Dubbo 的实现过程？</h3><div align="center"><img src="http://dunwu.test.upcdn.net/cs/distributed/rpc/dubbo/dubbo基本架构.png" width="500"/></div><p>节点角色：</p><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><p>调用关系：</p><ol><li>务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h3 id="32-dubbo-负载均衡策略有哪些"><a class="markdownIt-Anchor" href="#32-dubbo-负载均衡策略有哪些"></a> 3.2. Dubbo 负载均衡策略有哪些？</h3><h5 id="random"><a class="markdownIt-Anchor" href="#random"></a> Random</h5><ul><li>随机，按权重设置随机概率。</li><li>在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。</li></ul><h5 id="roundrobin"><a class="markdownIt-Anchor" href="#roundrobin"></a> RoundRobin</h5><ul><li>轮循，按公约后的权重设置轮循比率。</li><li>存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。</li></ul><h5 id="leastactive"><a class="markdownIt-Anchor" href="#leastactive"></a> LeastActive</h5><ul><li>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</li><li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li></ul><h5 id="consistenthash"><a class="markdownIt-Anchor" href="#consistenthash"></a> ConsistentHash</h5><ul><li>一致性 Hash，相同参数的请求总是发到同一提供者。</li><li>当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。</li><li>算法参见：<a href="http://en.wikipedia.org/wiki/Consistent_hashing" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Consistent_hashing</a></li><li>缺省只对第一个参数 Hash，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.arguments&quot; value=&quot;0,1&quot; /&gt;</code></li><li>缺省用 160 份虚拟节点，如果要修改，请配置 <code>&lt;dubbo:parameter key=&quot;hash.nodes&quot; value=&quot;320&quot; /&gt;</code></li></ul><h3 id="33-dubbo-集群容错策略"><a class="markdownIt-Anchor" href="#33-dubbo-集群容错策略"></a> 3.3. Dubbo 集群容错策略 ？</h3><div align="center"><img src="http://dunwu.test.upcdn.net/cs/distributed/rpc/dubbo/dubbo%E9%9B%86%E7%BE%A4%E5%AE%B9%E9%94%99.jpg"/></div><ul><li><strong>Failover</strong> - 失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 retries=“2” 来设置重试次数(不含第一次)。</li><li><strong>Failfast</strong> - 快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</li><li><strong>Failsafe</strong> - 失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</li><li><strong>Failback</strong> - 失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</li><li><strong>Forking</strong> - 并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=“2” 来设置最大并行数。</li><li><strong>Broadcast</strong> - 播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</li></ul><h3 id="34-动态代理策略"><a class="markdownIt-Anchor" href="#34-动态代理策略"></a> 3.4. 动态代理策略？</h3><p>Dubbo 作为 RPC 框架，首先要完成的就是跨系统，跨网络的服务调用。消费方与提供方遵循统一的接口定义，消费方调用接口时，Dubbo 将其转换成统一格式的数据结构，通过网络传输，提供方根据规则找到接口实现，通过反射完成调用。也就是说，消费方获取的是对远程服务的一个代理(Proxy)，而提供方因为要支持不同的接口实现，需要一个包装层(Wrapper)。调用的过程大概是这样：</p><div align="center"><img src="https://oscimg.oschina.net/oscnet/bef19cd5a31b5ae13aff35a8cb4898faaf0.jpg"/></div><p>消费方的 Proxy 和提供方的 Wrapper 得以让 Dubbo 构建出复杂、统一的体系。而这种动态代理与包装也是通过基于 SPI 的插件方式实现的，它的接口就是<strong>ProxyFactory</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SPI</span>(<span class="string">"javassist"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span>(&#123;Constants.PROXY_KEY&#125;)</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Adaptive</span>(&#123;Constants.PROXY_KEY&#125;)</span><br><span class="line">    &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ProxyFactory 有两种实现方式，一种是基于 JDK 的代理实现，一种是基于 javassist 的实现。ProxyFactory 接口上定义了@SPI(“javassist”)，默认为 javassist 的实现。</p><h3 id="35-dubbo-支持哪些序列化协议hessianhessian-的数据结构"><a class="markdownIt-Anchor" href="#35-dubbo-支持哪些序列化协议hessianhessian-的数据结构"></a> 3.5. Dubbo 支持哪些序列化协议？Hessian？Hessian 的数据结构？</h3><ol><li>dubbo 序列化，阿里尚不成熟的 java 序列化实现。</li><li>hessian2 序列化：hessian 是一种跨语言的高效二进制的序列化方式，但这里实际不是原生的 hessian2 序列化，而是阿里修改过的 hessian lite，它是 dubbo RPC 默认启用的序列化方式。</li><li>json 序列化：目前有两种实现，一种是采用的阿里的 fastjson 库，另一种是采用 dubbo 中自已实现的简单 json 库，一般情况下，json 这种文本序列化性能不如二进制序列化。</li><li>java 序列化：主要是采用 JDK 自带的 java 序列化实现，性能很不理想。</li><li>Kryo 和 FST：Kryo 和 FST 的性能依然普遍优于 hessian 和 dubbo 序列化。</li></ol><p>Hessian 序列化与 Java 默认的序列化区别？</p><p>Hessian 是一个轻量级的 remoting on http 工具，采用的是 Binary RPC 协议，所以它很适合于发送二进制数据，同时又具有防火墙穿透能力。</p><ol><li>Hessian 支持跨语言串行</li><li>比 java 序列化具有更好的性能和易用性</li><li>支持的语言比较多</li></ol><h3 id="36-protoco-buffer-是什么"><a class="markdownIt-Anchor" href="#36-protoco-buffer-是什么"></a> 3.6. Protoco Buffer 是什么？</h3><p>Protocol Buffer 是 Google 出品的一种轻量 &amp; 高效的结构化数据存储格式，性能比 Json、XML 真的强！太！多！</p><p>Protocol Buffer 的序列化 &amp; 反序列化简单 &amp; 速度快的原因是：</p><ol><li>编码 / 解码 方式简单（只需要简单的数学运算 = 位移等等）</li><li>采用 Protocol Buffer 自身的框架代码 和 编译器 共同完成</li></ol><p>Protocol Buffer 的数据压缩效果好（即序列化后的数据量体积小）的原因是：</p><ol><li>采用了独特的编码方式，如 Varint、Zigzag 编码方式等等</li><li>采用 T - L - V 的数据存储方式：减少了分隔符的使用 &amp; 数据存储得紧凑</li></ol><h3 id="37-注册中心挂了可以继续通信吗"><a class="markdownIt-Anchor" href="#37-注册中心挂了可以继续通信吗"></a> 3.7. 注册中心挂了可以继续通信吗？</h3><p>可以。Dubbo 消费者在应用启动时会从注册中心拉取已注册的生产者的地址接口，并缓存在本地。每次调用时，按照本地存储的地址进行调用。</p><h3 id="38-zookeeper-原理是什么zookeeper-有什么用"><a class="markdownIt-Anchor" href="#38-zookeeper-原理是什么zookeeper-有什么用"></a> 3.8. ZooKeeper 原理是什么？ZooKeeper 有什么用？</h3><p>ZooKeeper 是一个分布式应用协调系统，已经用到了许多分布式项目中，用来完成统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等工作。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/distributed/rpc/zookeeper/zookeeper-service.png" /></div><ol><li>每个 Server 在内存中存储了一份数据；</li><li>Zookeeper 启动时，将从实例中选举一个 leader（Paxos 协议）；</li><li>Leader 负责处理数据更新等操作（Zab 协议）；</li><li>一个更新操作成功，当且仅当大多数 Server 在内存中成功修改数据。</li></ol><h3 id="39-netty-有什么用niobioaio-有什么用有什么区别"><a class="markdownIt-Anchor" href="#39-netty-有什么用niobioaio-有什么用有什么区别"></a> 3.9. Netty 有什么用？NIO/BIO/AIO 有什么用？有什么区别？</h3><p>Netty 是一个“网络通讯框架”。</p><p>Netty 进行事件处理的流程。<code>Channel</code>是连接的通道，是 ChannelEvent 的产生者，而<code>ChannelPipeline</code>可以理解为 ChannelHandler 的集合。</p><div align="center"><img src="https://camo.githubusercontent.com/5f7331d15c79fba29474c5be6e9e86db465637c3/687474703a2f2f7374617469632e6f736368696e612e6e65742f75706c6f6164732f73706163652f323031332f303932312f3137343033325f313872625f3139303539312e706e67"/></div><blockquote><p>参考：<a href="https://github.com/code4craft/netty-learning/blob/master/posts/ch1-overview.md" target="_blank" rel="noopener">https://github.com/code4craft/netty-learning/blob/master/posts/ch1-overview.md</a></p></blockquote><p>IO 的方式通常分为几种：</p><ul><li>同步阻塞的 BIO</li><li>同步非阻塞的 NIO</li><li>异步非阻塞的 AIO</li></ul><p>在使用同步 I/O 的网络应用中，如果要同时处理多个客户端请求，或是在客户端要同时和多个服务器进行通讯，就必须使用多线程来处理。</p><p>NIO 基于 Reactor，当 socket 有流可读或可写入 socket 时，操作系统会相应的通知引用程序进行处理，应用再将流读取到缓冲区或写入操作系统。也就是说，这个时候，已经不是一个连接就要对应一个处理线程了，而是有效的请求，对应一个线程，当连接没有数据时，是没有工作线程来处理的。</p><p>与 NIO 不同，当进行读写操作时，只须直接调用 API 的 read 或 write 方法即可。这两种方法均为异步的，对于读操作而言，当有流可读取时，操作系统会将可读的流传入 read 方法的缓冲区，并通知应用程序；对于写操作而言，当操作系统将 write 方法传递的流写入完毕时，操作系统主动通知应用程序。  即可以理解为，read/write 方法都是异步的，完成后会主动调用回调函数。</p><blockquote><p>参考：<a href="https://blog.csdn.net/skiof007/article/details/52873421" target="_blank" rel="noopener">https://blog.csdn.net/skiof007/article/details/52873421</a></p></blockquote><h3 id="310-为什么要进行系统拆分拆分不用-dubbo-可以吗"><a class="markdownIt-Anchor" href="#310-为什么要进行系统拆分拆分不用-dubbo-可以吗"></a> 3.10. 为什么要进行系统拆分？拆分不用 Dubbo 可以吗？</h3><p>系统拆分从资源角度分为：应用拆分和数据库拆分。</p><p>从采用的先后顺序可分为：水平扩展、垂直拆分、业务拆分、水平拆分。</p><div align="center"><img src="http://misc.linkedkeeper.com/misc/img/blog/201804/linkedkeeper0_9c2ed2ed-6156-40f7-ad08-20af067047ca.jpg"/></div><p>是否使用服务依据实际业务场景来决定。</p><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h3 id="311-dubbo-和-thrift-有什么区别"><a class="markdownIt-Anchor" href="#311-dubbo-和-thrift-有什么区别"></a> 3.11. Dubbo 和 Thrift 有什么区别？</h3><ul><li>Thrift 是跨语言的 RPC 框架。</li><li>Dubbo 支持服务治理，而 Thrift 不支持。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式技术面试题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式技术面试题&quot;&gt;&lt;/a&gt; 分布式技术面试题&lt;/h1&gt;
&lt;!-- TOC depthFrom:2 depthTo:3 --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="architecture" scheme="https://dunwu.github.io/blog/categories/design/architecture/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="architecture" scheme="https://dunwu.github.io/blog/tags/architecture/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/tags/distributed/"/>
    
      <category term="interview" scheme="https://dunwu.github.io/blog/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>bigdata/README</title>
    <link href="https://dunwu.github.io/blog/bigdata/README/"/>
    <id>https://dunwu.github.io/blog/bigdata/README/</id>
    <published>2019-10-25T06:31:53.460Z</published>
    <updated>2019-10-21T09:38:25.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大数据"><a class="markdownIt-Anchor" href="#大数据"></a> 大数据</h1><h2 id="知识点"><a class="markdownIt-Anchor" href="#知识点"></a> 📝 知识点</h2><ul><li><a href="MapReduce.md">MapReduce</a></li><li><a href="HDFS.md">HDFS</a></li><li><a href="YARN.md">YARN</a></li><li><a href="hbase">HBase</a><ul><li><a href="hbase/hbase-cli.md">HBase 命令</a></li><li><a href="hbase/hbase-ops.md">HBase 配置</a></li></ul></li></ul><h2 id="学习资源"><a class="markdownIt-Anchor" href="#学习资源"></a> 📚 学习资源</h2><h3 id="书"><a class="markdownIt-Anchor" href="#书"></a> 书</h3><p><a href="https://book.douban.com/subject/6523762/" target="_blank" rel="noopener">Hadoop 权威指南</a></p><h2 id="传送门"><a class="markdownIt-Anchor" href="#传送门"></a> 🚪 传送门</h2><p>| <a href="https://github.com/dunwu/blog" target="_blank" rel="noopener">回首頁</a> |</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;大数据&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#大数据&quot;&gt;&lt;/a&gt; 大数据&lt;/h1&gt;
&lt;h2 id=&quot;知识点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#知识点&quot;&gt;&lt;/a&gt; 📝 知识点&lt;/h2&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="hide" scheme="https://dunwu.github.io/blog/tags/hide/"/>
    
  </entry>
  
  <entry>
    <title>分布式存储</title>
    <link href="https://dunwu.github.io/blog/design/distributed/distributed-storage/"/>
    <id>https://dunwu.github.io/blog/design/distributed/distributed-storage/</id>
    <published>2019-08-21T03:30:00.000Z</published>
    <updated>2019-09-03T12:44:04.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式存储"><a class="markdownIt-Anchor" href="#分布式存储"></a> 分布式存储</h1><h2 id="分区规则"><a class="markdownIt-Anchor" href="#分区规则"></a> 分区规则</h2><p><strong>分布式数据库</strong> 首先要解决把 <strong>整个数据集</strong> 按照 <strong>分区规则</strong> 映射到 <strong>多个节点</strong> 的问题，即把 <strong>数据集</strong> 划分到 <strong>多个节点</strong> 上，每个节点负责 <strong>整体数据</strong> 的一个 <strong>子集</strong>。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/architecture/partition-rule.png!zp" /></div><p>数据分布通常有 <strong>哈希分区</strong> 和 <strong>顺序分区</strong> 两种方式，对比如下：</p><table><thead><tr><th style="text-align:left">分区方式</th><th style="text-align:left">特点</th><th style="text-align:left">相关产品</th></tr></thead><tbody><tr><td style="text-align:left">哈希分区</td><td style="text-align:left">离散程度好，数据分布与业务无关，无法顺序访问</td><td style="text-align:left">Redis Cluster，Cassandra，Dynamo</td></tr><tr><td style="text-align:left">顺序分区</td><td style="text-align:left">离散程度易倾斜，数据分布与业务相关，可以顺序访问</td><td style="text-align:left">BigTable，HBase，Hypertable</td></tr></tbody></table><p>由于 <code>Redis Cluster</code> 采用 <strong>哈希分区规则</strong>，这里重点讨论 <strong>哈希分区</strong>。常见的 <strong>哈希分区</strong> 规则有几种，下面分别介绍：</p><h3 id="节点取余分区"><a class="markdownIt-Anchor" href="#节点取余分区"></a> 节点取余分区</h3><p>使用特定的数据，如 <code>Redis</code> 的 <strong>键</strong> 或 <strong>用户</strong> <code>ID</code>，再根据 <strong>节点数量</strong> <code>N</code> 使用公式：<code>hash（key）% N</code> 计算出 <strong>哈希值</strong>，用来决定数据 <strong>映射</strong> 到哪一个节点上。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/architecture/partition-hash-mod.png!zp" /></div><ul><li><strong>优点</strong></li></ul><p>这种方式的突出优点是 <strong>简单性</strong>，常用于 <strong>数据库</strong> 的 <strong>分库分表规则</strong>。一般采用 <strong>预分区</strong> 的方式，提前根据 <strong>数据量</strong> 规划好 <strong>分区数</strong>，比如划分为 <code>512</code> 或 <code>1024</code> 张表，保证可支撑未来一段时间的 <strong>数据容量</strong>，再根据 <strong>负载情况</strong> 将 <strong>表</strong> 迁移到其他 <strong>数据库</strong> 中。扩容时通常采用 <strong>翻倍扩容</strong>，避免 <strong>数据映射</strong> 全部被 <strong>打乱</strong>，导致 <strong>全量迁移</strong> 的情况。</p><ul><li><strong>缺点</strong></li></ul><p>当 <strong>节点数量</strong> 变化时，如 <strong>扩容</strong> 或 <strong>收缩</strong> 节点，数据节点 <strong>映射关系</strong> 需要重新计算，会导致数据的 <strong>重新迁移</strong>。</p><h3 id="一致性哈希分区"><a class="markdownIt-Anchor" href="#一致性哈希分区"></a> 一致性哈希分区</h3><p><strong>一致性哈希</strong> 可以很好的解决 <strong>稳定性问题</strong>，可以将所有的 <strong>存储节点</strong> 排列在 <strong>首尾相接</strong> 的 <code>Hash</code> 环上，每个 <code>key</code> 在计算 <code>Hash</code> 后会 <strong>顺时针</strong> 找到 <strong>临接</strong> 的 <strong>存储节点</strong> 存放。而当有节点 <strong>加入</strong> 或 <strong>退出</strong> 时，仅影响该节点在 <code>Hash</code> 环上 <strong>顺时针相邻</strong> 的 <strong>后续节点</strong>。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/architecture/partition-consistent-hash.png!zp" /></div><ul><li><strong>优点</strong></li></ul><p><strong>加入</strong> 和 <strong>删除</strong> 节点只影响 <strong>哈希环</strong> 中 <strong>顺时针方向</strong> 的 <strong>相邻的节点</strong>，对其他节点无影响。</p><ul><li><strong>缺点</strong></li></ul><p><strong>加减节点</strong> 会造成 <strong>哈希环</strong> 中部分数据 <strong>无法命中</strong>。当使用 <strong>少量节点</strong> 时，<strong>节点变化</strong> 将大范围影响 <strong>哈希环</strong> 中 <strong>数据映射</strong>，不适合 <strong>少量数据节点</strong> 的分布式方案。<strong>普通</strong> 的 <strong>一致性哈希分区</strong> 在增减节点时需要 <strong>增加一倍</strong> 或 <strong>减去一半</strong> 节点才能保证 <strong>数据</strong> 和 <strong>负载的均衡</strong>。</p><blockquote><p><strong>注意</strong>：因为 <strong>一致性哈希分区</strong> 的这些缺点，一些分布式系统采用 <strong>虚拟槽</strong> 对 <strong>一致性哈希</strong> 进行改进，比如 <code>Dynamo</code> 系统。</p></blockquote><h3 id="虚拟槽分区"><a class="markdownIt-Anchor" href="#虚拟槽分区"></a> 虚拟槽分区</h3><p><strong>虚拟槽分区</strong> 巧妙地使用了 <strong>哈希空间</strong>，使用 <strong>分散度良好</strong> 的 <strong>哈希函数</strong> 把所有数据 <strong>映射</strong> 到一个 <strong>固定范围</strong> 的 <strong>整数集合</strong> 中，整数定义为 <strong>槽</strong>（<code>slot</code>）。这个范围一般 <strong>远远大于</strong> 节点数，比如 <code>Redis Cluster</code> 槽范围是 <code>0 ~ 16383</code>。<strong>槽</strong> 是集群内 <strong>数据管理</strong> 和 <strong>迁移</strong> 的 <strong>基本单位</strong>。采用 <strong>大范围槽</strong> 的主要目的是为了方便 <strong>数据拆分</strong> 和 <strong>集群扩展</strong>。每个节点会负责 <strong>一定数量的槽</strong>，如图所示：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/architecture/partition-hash-slot.png!zp" /></div>当前集群有 `3` 个节点，每个节点平均大约负责 `5460` 个 **槽**。由于采用 **高质量** 的 **哈希算法**，每个槽所映射的数据通常比较 **均匀**，将数据平均划分到 `3` 个节点进行 **数据分区**。`Redis Cluster` 就是采用 **虚拟槽分区**。<p>集群中的每个节点负责一部分哈希槽，比如集群中有３个节点，则：</p><ul><li>节点Ａ存储的哈希槽范围是：0 – 5460</li><li>节点Ｂ存储的哈希槽范围是：5461 – 10922</li><li>节点Ｃ存储的哈希槽范围是：10923 – 16383</li></ul><p>这种结构很容易 <strong>添加</strong> 或者 <strong>删除</strong> 节点。如果 <strong>增加</strong> 一个节点 <code>4</code>，就需要从节点 <code>1 ~ 3</code> 获得部分 <strong>槽</strong> 分配到节点 <code>4</code> 上。如果想 <strong>移除</strong> 节点 <code>1</code>，需要将节点 <code>1</code> 中的 <strong>槽</strong> 移到节点 <code>2 ~ 3</code> 上，然后将 <strong>没有任何槽</strong> 的节点 <code>1</code> 从集群中 <strong>移除</strong> 即可。</p><blockquote><p>由于从一个节点将 <strong>哈希槽</strong> 移动到另一个节点并不会 <strong>停止服务</strong>，所以无论 <strong>添加删除</strong> 或者 <strong>改变</strong> 某个节点的 <strong>哈希槽的数量</strong> 都不会造成 <strong>集群不可用</strong> 的状态.</p></blockquote><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://juejin.im/post/5b8fc5536fb9a05d2d01fb11" target="_blank" rel="noopener">深入剖析 Redis 系列(三) - Redis 集群模式搭建与原理详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式存储&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式存储&quot;&gt;&lt;/a&gt; 分布式存储&lt;/h1&gt;
&lt;h2 id=&quot;分区规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分区规则&quot;&gt;&lt;/a&gt; 分区规则&lt;
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/categories/design/distributed/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/tags/distributed/"/>
    
  </entry>
  
  <entry>
    <title>Java 教程</title>
    <link href="https://dunwu.github.io/blog/java/"/>
    <id>https://dunwu.github.io/blog/java/</id>
    <published>2019-08-19T01:45:00.000Z</published>
    <updated>2019-10-23T12:31:12.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-教程"><a class="markdownIt-Anchor" href="#java-教程"></a> Java 教程</h1><blockquote><p>☕ Java Tutorial 是本人在 Java 技术领域的十年积累。</p><ul><li>🔁 项目同步维护：<a href="https://github.com/dunwu/java-tutorial/" target="_blank" rel="noopener">Github</a> | <a href="https://gitee.com/turnon/java-tutorial/" target="_blank" rel="noopener">Gitee</a></li><li>📖 电子书阅读：<a href="https://dunwu.github.io/java-tutorial/">Github Pages</a> | <a href="https://turnon.gitee.io/java-tutorial/" target="_blank" rel="noopener">Gitee Pages</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-教程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-教程&quot;&gt;&lt;/a&gt; Java 教程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;☕ Java Tutorial 是本人在 Java 技术领域的十年积累。&lt;/p&gt;
&lt;ul
      
    
    </summary>
    
    
      <category term="java" scheme="https://dunwu.github.io/blog/categories/java/"/>
    
    
      <category term="java" scheme="https://dunwu.github.io/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>数据库教程</title>
    <link href="https://dunwu.github.io/blog/database/"/>
    <id>https://dunwu.github.io/blog/database/</id>
    <published>2019-08-19T01:45:00.000Z</published>
    <updated>2019-09-04T10:16:29.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库教程"><a class="markdownIt-Anchor" href="#数据库教程"></a> 数据库教程</h1><blockquote><p>🔢 数据库经验总结</p><ul><li>🔁 项目同步维护：<a href="https://github.com/dunwu/db-tutorial/" target="_blank" rel="noopener">Github</a> | <a href="https://gitee.com/turnon/db-tutorial/" target="_blank" rel="noopener">Gitee</a></li><li>📖 电子书阅读：<a href="https://dunwu.github.io/db-tutorial/">Github Pages</a> | <a href="https://turnon.gitee.io/db-tutorial/" target="_blank" rel="noopener">Gitee Pages</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库教程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据库教程&quot;&gt;&lt;/a&gt; 数据库教程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;🔢 数据库经验总结&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🔁 项目同步维护：&lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="database" scheme="https://dunwu.github.io/blog/categories/database/"/>
    
    
      <category term="database" scheme="https://dunwu.github.io/blog/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>前端教程</title>
    <link href="https://dunwu.github.io/blog/frontend/"/>
    <id>https://dunwu.github.io/blog/frontend/</id>
    <published>2019-08-19T01:45:00.000Z</published>
    <updated>2019-10-23T12:31:12.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="frontend-tutorial"><a class="markdownIt-Anchor" href="#frontend-tutorial"></a> Frontend Tutorial</h1><blockquote><p>☕ frontend-tutorial 是对 Java 核心技术的经验总结。</p><ul><li>🔁 项目同步维护：<a href="https://github.com/dunwu/frontend-tutorial/" target="_blank" rel="noopener">Github</a> | <a href="https://gitee.com/turnon/frontend-tutorial/" target="_blank" rel="noopener">Gitee</a></li><li>📖 电子书阅读：<a href="https://dunwu.github.io/frontend-tutorial/">Github Pages</a> | <a href="http://turnon.gitee.io/frontend-tutorial/" target="_blank" rel="noopener">Gitee Pages</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;frontend-tutorial&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#frontend-tutorial&quot;&gt;&lt;/a&gt; Frontend Tutorial&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;☕ frontend-tut
      
    
    </summary>
    
    
      <category term="frontend" scheme="https://dunwu.github.io/blog/categories/frontend/"/>
    
    
      <category term="frontend" scheme="https://dunwu.github.io/blog/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Linux 教程</title>
    <link href="https://dunwu.github.io/blog/linux/"/>
    <id>https://dunwu.github.io/blog/linux/</id>
    <published>2019-08-19T01:45:00.000Z</published>
    <updated>2019-10-21T04:11:26.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux-教程"><a class="markdownIt-Anchor" href="#linux-教程"></a> Linux 教程</h1><blockquote><p>🔁 项目同步维护在 <a href="https://github.com/dunwu/linux-tutorial" target="_blank" rel="noopener">github</a> | <a href="https://gitee.com/turnon/linux-tutorial" target="_blank" rel="noopener">gitee</a></p><p>📖 <a href="https://dunwu.github.io/linux-tutorial/">电子书</a> | <a href="http://turnon.gitee.io/linux-tutorial/" target="_blank" rel="noopener">电子书（国内）</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linux-教程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linux-教程&quot;&gt;&lt;/a&gt; Linux 教程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;🔁 项目同步维护在 &lt;a href=&quot;https://github.com/du
      
    
    </summary>
    
    
      <category term="linux" scheme="https://dunwu.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="https://dunwu.github.io/blog/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>分布式 ID</title>
    <link href="https://dunwu.github.io/blog/design/distributed/distributed-id/"/>
    <id>https://dunwu.github.io/blog/design/distributed/distributed-id/</id>
    <published>2019-07-24T03:55:00.000Z</published>
    <updated>2019-08-21T04:00:04.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式-id"><a class="markdownIt-Anchor" href="#分布式-id"></a> 分布式 ID</h1><h2 id="uuid"><a class="markdownIt-Anchor" href="#uuid"></a> UUID</h2><p>UUID 是通用唯一识别码（Universally Unique Identifier)的缩写，开放软件基金会(OSF)规范定义了包括网卡 MAC 地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素。利用这些元素来生成 UUID。</p><p>UUID 是由 128 位二进制组成，一般转换成十六进制，然后用 String 表示。在 java 中有个 UUID 类,在他的注释中我们看见这里有 4 种不同的 UUID 的生成策略:</p><ul><li>random - 基于随机数生成 UUID，由于 Java 中的随机数是伪随机数，其重复的概率是可以被计算出来的。这个一般我们用下面的代码获取基于随机数的 UUID:</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String id = UUID.randomUUID().toString();</span><br></pre></td></tr></table></figure><ul><li>time-based - 基于时间的 UUID,这个一般是通过当前时间，随机数，和本地 Mac 地址来计算出来，自带的 JDK 包并没有这个算法的我们在一些 UUIDUtil 中，比如我们的 log4j.core.util，会重新定义 UUID 的高位和低位。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UUID <span class="title">getTimeBasedUuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> time = System.currentTimeMillis() * <span class="number">10000L</span> + <span class="number">122192928000000000L</span> + (<span class="keyword">long</span>)(COUNT.incrementAndGet() % <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">long</span> timeLow = (time &amp; <span class="number">4294967295L</span>) &lt;&lt; <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">long</span> timeMid = (time &amp; <span class="number">281470681743360L</span>) &gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">long</span> timeHi = (time &amp; <span class="number">1152640029630136320L</span>) &gt;&gt; <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">long</span> most = timeLow | timeMid | <span class="number">4096L</span> | timeHi;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UUID(most, LEAST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>DCE security - DCE 安全的 UUID。</p></li><li><p>name-based - 基于名字的 UUID，通过计算名字和名字空间的 MD5 来计算 UUID。</p></li></ul><p>UUID 的优点:</p><ul><li>通过本地生成，没有经过网络 I/O，性能较快</li></ul><p>UUID 的缺点:</p><ul><li><strong>长度过长</strong> - UUID 太长，16 字节 128 位，通常以 36 长度的字符串表示，很多场景不适用。例如：Mysql 官方明确建议主键越短越好，36 个字符长度的 UUID 不符合要求。</li><li><strong>信息不安全</strong> - 基于 MAC 地址生成 UUID 的算法可能会造成 MAC 地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。</li><li><strong>无序性</strong> - 不能生成递增有序的数字。这对于一些特定场景不利。例如：如果作为数据库主键，在 InnoDB 引擎下，UUID 的无序性可能会引起数据位置频繁变动，严重影响性能。</li></ul><p>适用场景：UUID 的适用场景可以为不需要担心过多的空间占用，以及不需要生成有递增趋势的数字。在 Log4j 里 <code>UuidPatternConverter</code> 中加入了 UUID 来标识每一条日志。</p><h2 id="数据库主键自增"><a class="markdownIt-Anchor" href="#数据库主键自增"></a> 数据库主键自增</h2><p>大家对于唯一标识最容易想到的就是主键自增，这个也是我们最常用的方法。例如我们有个订单服务，那么把订单 id 设置为主键自增即可。</p><p>优点:</p><ul><li>简单方便，有序递增，方便排序和分页</li></ul><p>缺点:</p><ul><li>分库分表会带来问题，需要进行改造。</li><li>并发性能不高，受限于数据库的性能。</li><li>简单递增容易被其他人猜测利用，比如你有一个用户服务用的递增，那么其他人可以根据分析注册的用户 ID 来得到当天你的服务有多少人注册，从而就能猜测出你这个服务当前的一个大概状况。</li><li>数据库宕机服务不可用。</li></ul><p>适用场景: 根据上面可以总结出来，当数据量不多，并发性能不高的时候这个很适合，比如一些 to B 的业务，商家注册这些，商家注册和用户注册不是一个数量级的，所以可以数据库主键递增。如果对顺序递增强依赖，那么也可以使用数据库主键自增。</p><h2 id="redis"><a class="markdownIt-Anchor" href="#redis"></a> Redis</h2><p>熟悉 Redis 的同学，应该知道在 Redis 中有两个命令 Incr，IncrBy,因为 Redis 是单线程的所以能保证原子性。</p><p>优点：</p><ul><li>性能比数据库好，能满足有序递增。</li></ul><p>缺点：</p><ul><li>由于 redis 是内存的 KV 数据库，即使有 AOF 和 RDB，但是依然会存在数据丢失，有可能会造成 ID 重复。</li><li>依赖于 redis，redis 要是不稳定，会影响 ID 生成。</li></ul><p>适用：由于其性能比数据库好，但是有可能会出现 ID 重复和不稳定，这一块如果可以接受那么就可以使用。也适用于到了某个时间，比如每天都刷新 ID，那么这个 ID 就需要重置，通过(Incr Today)，每天都会从 0 开始加。</p><h2 id="zookeeper"><a class="markdownIt-Anchor" href="#zookeeper"></a> Zookeeper</h2><p>利用 ZK 的 Znode 数据版本如下面的代码，每次都不获取期望版本号也就是每次都会成功，那么每次都会返回最新的版本号:</p><div align="center"><img src="https://user-gold-cdn.xitu.io/2018/9/29/166243d8d5897f41?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/></div><p>Zookeeper 这个方案用得较少，严重依赖 Zookeeper 集群，并且性能不是很高，所以不予推荐。</p><h2 id="数据库分段服务缓存-id"><a class="markdownIt-Anchor" href="#数据库分段服务缓存-id"></a> 数据库分段+服务缓存 ID</h2><p>这个方法在美团的 Leaf 中有介绍，详情可以参考美团技术团队的发布的技术文章:<a href="https://link.juejin.im?target=https%3A%2F%2Ftech.meituan.com%2FMT_Leaf.html">Leaf——美团点评分布式 ID 生成系统</a>,这个方案是将数据库主键自增进行优化。</p><div align="center"><img src="https://user-gold-cdn.xitu.io/2018/9/29/1662445bec45eb5d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/></div><p>biz_tag 代表每个不同的业务，max_id 代表每个业务设置的大小，step 代表每个 proxyServer 缓存的步长。 之前我们的每个服务都访问的是数据库，现在不需要，每个服务直接和我们的 ProxyServer 做交互，减少了对数据库的依赖。我们的每个 ProxyServer 回去数据库中拿出步长的长度，比如 server1 拿到了 1-1000,server2 拿到来 1001-2000。如果用完会再次去数据库中拿。</p><p>优点:</p><ul><li>比主键递增性能高，能保证趋势递增。</li><li>如果 DB 宕机，proxServer 由于有缓存依然可以坚持一段时间。</li></ul><p>缺点:</p><ul><li>和主键递增一样，容易被人猜测。</li><li>DB 宕机，虽然能支撑一段时间但是仍然会造成系统不可用。</li></ul><p>适用场景:需要趋势递增，并且 ID 大小可控制的，可以使用这套方案。</p><p>当然这个方案也可以通过一些手段避免被人猜测，把 ID 变成是无序的，比如把我们生成的数据是一个递增的 long 型，把这个 Long 分成几个部分，比如可以分成几组三位数，几组四位数，然后在建立一个映射表，将我们的数据变成无序。</p><h2 id="雪花算法-snowflake"><a class="markdownIt-Anchor" href="#雪花算法-snowflake"></a> 雪花算法-Snowflake</h2><p>算法原理：</p><p>Snowflake 是 Twitter 提出来的一个算法，其目的是生成一个 64bit 的整数:</p><div align="center"><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624602fd5d9c4c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/></div><ul><li>1bit:一般是符号位，不做处理</li><li>41bit:用来记录时间戳，这里可以记录 69 年，如果设置好起始时间比如今年是 2018 年，那么可以用到 2089 年，到时候怎么办？要是这个系统能用 69 年，我相信这个系统早都重构了好多次了。</li><li>10bit:10bit 用来记录机器 ID，总共可以记录 1024 台机器，一般用前 5 位代表数据中心，后面 5 位是某个数据中心的机器 ID</li><li>12bit:循环位，用来对同一个毫秒之内产生不同的 ID，12 位可以最多记录 4095 个，也就是在同一个机器同一毫秒最多记录 4095 个，多余的需要进行等待下毫秒。</li></ul><p>上面只是一个将 64bit 划分的标准，当然也不一定这么做，可以根据不同业务的具体场景来划分，比如下面给出一个业务场景：</p><ul><li>服务目前 QPS10 万，预计几年之内会发展到百万。</li><li>当前机器三地部署，上海，北京，深圳都有。</li><li>当前机器 10 台左右，预计未来会增加至百台。</li></ul><p>这个时候我们根据上面的场景可以再次合理的划分 62bit,QPS 几年之内会发展到百万，那么每毫秒就是千级的请求，目前 10 台机器那么每台机器承担百级的请求，为了保证扩展，后面的循环位可以限制到 1024，也就是 2^10，那么循环位 10 位就足够了。</p><p>机器三地部署我们可以用 3bit 总共 8 来表示机房位置，当前的机器 10 台，为了保证扩展到百台那么可以用 7bit 128 来表示，时间位依然是 41bit,那么还剩下 64-10-3-7-41-1 = 2bit,还剩下 2bit 可以用来进行扩展。</p><div align="center"><img src="https://user-gold-cdn.xitu.io/2018/9/29/16624909d2007c22?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/></div><p>适用场景:当我们需要无序不能被猜测的 ID，并且需要一定高性能，且需要 long 型，那么就可以使用我们雪花算法。比如常见的订单 ID，用雪花算法别人就无法猜测你每天的订单量是多少。</p><p>优点：</p><ul><li>毫秒数在高位，自增序列在低位，整个 ID 都是趋势递增的。</li><li>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成 ID 的性能也是非常高的。</li><li>可以根据自身业务特性分配 bit 位，非常灵活。</li></ul><p>缺点：</p><ul><li>强依赖机器时钟，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。</li></ul><h3 id="一个简单的-snowflake"><a class="markdownIt-Anchor" href="#一个简单的-snowflake"></a> 一个简单的 Snowflake</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributedId</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId; <span class="comment">// 这个就是代表了机器id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId; <span class="comment">// 这个就是代表了机房id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence; <span class="comment">// 这个就是代表了一毫秒内生成的多个id的最新序号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DistributedId</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId, <span class="keyword">long</span> sequence)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sanity check for workerId</span></span><br><span class="line">        <span class="comment">// 这儿就不检查了，要求就是你传递进来的机房id和机器id不能超过32，不能小于0</span></span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                String.format(<span class="string">"worker Id can't be greater than %d or less than 0"</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                String.format(<span class="string">"datacenter Id can't be greater than %d or less than 0"</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">        <span class="keyword">this</span>.sequence = sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> twepoch = <span class="number">1288834974657L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是二进制运算，就是5 bit最多只能有31个数字，也就是说机器id最多只能是32以内</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是一个意思，就是5 bit最多只能有31个数字，机房id最多只能是32以内</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getWorkerId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workerId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDatacenterId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是核心方法，通过调用nextId()方法，让当前这台机器上的snowflake算法程序生成一个全局唯一的id</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这儿就是获取当前时间戳，单位是毫秒</span></span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            System.err.printf(<span class="string">"clock is moving backwards. Rejecting requests until %d."</span>, lastTimestamp);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                String.format(<span class="string">"Clock moved backwards. Refusing to generate id for %d milliseconds"</span>,</span><br><span class="line">                              lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面是说假设在同一个毫秒内，又发送了一个请求生成一个id</span></span><br><span class="line">        <span class="comment">// 这个时候就得把seqence序号给递增1，最多就是4096</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 这个意思是说一个毫秒内最多只能有4096个数字，无论你传递多少进来，</span></span><br><span class="line">            <span class="comment">//这个位运算保证始终就是在4096这个范围内，避免你自己传递个sequence超过了4096这个范围</span></span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这儿记录一下最近一次生成id的时间戳，单位是毫秒</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这儿就是最核心的二进制位运算操作，生成一个64bit的id</span></span><br><span class="line">        <span class="comment">// 先将当前时间戳左移，放到41 bit那儿；将机房id左移放到5 bit那儿；将机器id左移放到5 bit那儿；将序号放最后12 bit</span></span><br><span class="line">        <span class="comment">// 最后拼接起来成一个64 bit的二进制数字，转换成10进制就是个long型</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift) | (workerId</span><br><span class="line">            &lt;&lt; workerIdShift) | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义了雪花算法的实现，在 nextId 中是我们生成雪花算法的关键。</p><h3 id="防止时钟回拨"><a class="markdownIt-Anchor" href="#防止时钟回拨"></a> 防止时钟回拨</h3><p>因为机器的原因会发生时间回拨，我们的雪花算法是强依赖我们的时间的，如果时间发生回拨，有可能会生成重复的 ID，在我们上面的 nextId 中我们用当前时间和上一次的时间进行判断，如果当前时间小于上一次的时间那么肯定是发生了回拨，普通的算法会直接抛出异常,这里我们可以对其进行优化,一般分为两个情况:</p><ul><li>如果时间回拨时间较短，比如配置 5ms 以内，那么可以直接等待一定的时间，让机器的时间追上来。</li><li>如果时间的回拨时间较长，我们不能接受这么长的阻塞等待，那么又有两个策略:</li></ul><ol><li>直接拒绝，抛出异常，打日志，通知 RD 时钟回滚。</li><li>利用扩展位，上面我们讨论过不同业务场景位数可能用不到那么多，那么我们可以把扩展位数利用起来了，比如当这个时间回拨比较长的时候，我们可以不需要等待，直接在扩展位加 1。2 位的扩展位允许我们有 3 次大的时钟回拨，一般来说就够了，如果其超过三次我们还是选择抛出异常，打日志。</li></ol><p>通过上面的几种策略可以比较的防护我们的时钟回拨，防止出现回拨之后大量的异常出现。下面是修改之后的代码，这里修改了时钟回拨的逻辑:</p><div align="center"><img src="https://user-gold-cdn.xitu.io/2018/9/29/166252f2a1edac10?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"/></div><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://github.com/baidu/uid-generator/blob/master/README.zh_cn.md" target="_blank" rel="noopener">百度分布式 ID</a></li><li><a href="https://juejin.im/post/5bb0217ef265da0ac2567b42" target="_blank" rel="noopener">如果再有人问你分布式 ID，这篇文章丢给他</a></li><li><a href="https://segmentfault.com/a/1190000011282426" target="_blank" rel="noopener">理解分布式 id 生成算法 SnowFlake</a></li><li><a href="https://tech.meituan.com/2017/04/21/mt-leaf.html" target="_blank" rel="noopener">Leaf——美团点评分布式 ID 生成系统</a></li><li><a href="https://www.ietf.org/rfc/rfc4122.txt" target="_blank" rel="noopener">UUID 规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式-id&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式-id&quot;&gt;&lt;/a&gt; 分布式 ID&lt;/h1&gt;
&lt;h2 id=&quot;uuid&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#uuid&quot;&gt;&lt;/a&gt; UU
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/categories/design/distributed/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/tags/distributed/"/>
    
  </entry>
  
  <entry>
    <title>分布式缓存</title>
    <link href="https://dunwu.github.io/blog/design/distributed/distributed-cache/"/>
    <id>https://dunwu.github.io/blog/design/distributed/distributed-cache/</id>
    <published>2019-06-27T07:36:00.000Z</published>
    <updated>2019-08-21T03:34:57.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式缓存"><a class="markdownIt-Anchor" href="#分布式缓存"></a> 分布式缓存</h1><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>使用缓存的好处：</p><ul><li>提升数据读取速度</li><li>提升系统扩展能力，通过扩展缓存，提升系统承载能力</li><li>降低存储成本，Cache+DB 的方式可以承担原有需要多台 DB 才能承担的请求量，节省机器成本</li></ul><p>根据业务场景，通常缓存有以下几种使用方式</p><ul><li>懒汉式(读时触发)：写入 DB 后, 然后把相关的数据也写入 Cache</li><li>饥饿式(写时触发)：先查询 DB 里的数据, 然后把相关的数据写入 Cache</li><li>定期刷新：适合周期性的跑数据的任务，或者列表型的数据，而且不要求绝对实时性</li></ul><p>缓存分类：</p><ul><li>应用内缓存：如：EHCache</li><li>分布式缓存：如：Memached、Redis</li></ul><h2 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h2><h3 id="缓存雪崩"><a class="markdownIt-Anchor" href="#缓存雪崩"></a> 缓存雪崩</h3><p>缓存雪崩是指：在高并发场景下，由于原有缓存失效，新缓存未到期间(例如：我们设置缓存时采用了相同的过期时间，在同一时刻出现大面积的缓存过期)，所有原本应该访问缓存的请求都去查询数据库了，而对数据库 CPU 和内存造成巨大压力，严重的会造成数据库宕机。从而形成一系列连锁反应，造成整个系统崩溃。</p><p>解决方案：</p><ul><li>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。</li><li>还有一个简单的方案，就是将缓存失效时间分散开，不要所有缓存时间长度都设置成 5 分钟或者 10 分钟；比如我们可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</li></ul><p>缓存失效时产生的雪崩效应，将所有请求全部放在数据库上，这样很容易就达到数据库的瓶颈，导致服务无法正常提供。尽量避免这种场景的发生。</p><h3 id="缓存穿透"><a class="markdownIt-Anchor" href="#缓存穿透"></a> 缓存穿透</h3><p>缓存穿透是指：用户查询的数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库再查询一遍，然后返回空（相当于进行了两次无用的查询）。这样请求就绕过缓存直接查数据库，这也是经常提的缓存命中率问题。</p><p>当在流量较大时，出现这样的情况，一直请求 DB，很容易导致服务挂掉。</p><p>解决方案：</p><ol><li>在封装的缓存 SET 和 GET 部分增加个步骤，如果查询一个 KEY 不存在，就以这个 KEY 为前缀设定一个标识 KEY；以后再查询该 KEY 的时候，先查询标识 KEY，如果标识 KEY 存在，就返回一个协定好的非 false 或者 NULL 值，然后 APP 做相应的处理，这样缓存层就不会被穿透。当然这个验证 KEY 的失效时间不能太长。</li><li>如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，一般只有几分钟。</li><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。</li></ol><h3 id="缓存预热"><a class="markdownIt-Anchor" href="#缓存预热"></a> 缓存预热</h3><p>缓存预热这个应该是一个比较常见的概念，相信很多小伙伴都应该可以很容易的理解，缓存预热就是系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><p>解决方案：</p><ol><li>直接写个缓存刷新页面，上线时手工操作下；</li><li>数据量不大，可以在项目启动的时候自动进行加载；</li><li>定时刷新缓存；</li></ol><h3 id="缓存更新"><a class="markdownIt-Anchor" href="#缓存更新"></a> 缓存更新</h3><p>除了缓存服务器自带的缓存失效策略之外（Redis 默认的有 6 中策略可供选择），我们还可以根据具体的业务需求进行自定义的缓存淘汰，常见的策略有两种：</p><ol><li>定时去清理过期的缓存；</li><li>当有用户请求过来时，再判断这个请求所用到的缓存是否过期，过期的话就去底层系统得到新数据并更新缓存。</li></ol><p>两者各有优劣，第一种的缺点是维护大量缓存的 key 是比较麻烦的，第二种的缺点就是每次用户请求过来都要判断缓存失效，逻辑相对比较复杂！具体用哪种方案，大家可以根据自己的应用场景来权衡。</p><h3 id="缓存降级"><a class="markdownIt-Anchor" href="#缓存降级"></a> 缓存降级</h3><p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p><p>降级的最终目的是保证核心服务可用，即使是有损的。而且有些服务是无法降级的（如加入购物车、结算）。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://juejin.im/entry/57e39e320e3dd90058021bff" target="_blank" rel="noopener">分布式缓存架构基础</a></li><li><a href="https://www.toutiao.com/i6533812974807679495/?tt_from=weixin&amp;utm_campaign=client_share&amp;from=singlemessage&amp;timestamp=1521281305&amp;app=news_article&amp;utm_source=weixin&amp;iid=28128279343&amp;utm_medium=toutiao_android&amp;weixin_list=1&amp;wxshare_count=2&amp;pbid=6517746516513195523" target="_blank" rel="noopener">阿里 P8 技术专家细究分布式缓存问题</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式缓存&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式缓存&quot;&gt;&lt;/a&gt; 分布式缓存&lt;/h1&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简介&quot;&gt;&lt;/a&gt; 简介&lt;/h2&gt;
&lt;
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/categories/design/distributed/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/tags/distributed/"/>
    
      <category term="cache" scheme="https://dunwu.github.io/blog/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="https://dunwu.github.io/blog/design/distributed/distributed-transaction/"/>
    <id>https://dunwu.github.io/blog/design/distributed/distributed-transaction/</id>
    <published>2019-06-21T03:30:00.000Z</published>
    <updated>2019-08-21T05:20:29.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式事务"><a class="markdownIt-Anchor" href="#分布式事务"></a> 分布式事务</h1><blockquote><p><strong>分布式事务指的是事务操作跨越多个节点，并且要求满足事务的 ACID 特性。</strong></p></blockquote><p>分布式事务的实现主要有以下 5 种方案：</p><ul><li>XA 方案</li><li>TCC 方案</li><li>本地消息表</li><li>可靠消息最终一致性方案</li><li>最大努力通知方案</li></ul><h2 id="两阶段提交"><a class="markdownIt-Anchor" href="#两阶段提交"></a> 两阶段提交</h2><blockquote><p>两阶段提交（Two-phase Commit，2PC）通过引入协调者（Coordinator）来调度参与者的行为，并最终决定这些参与者是否要真正执行事务。</p><p>参考实现：<a href="https://github.com/changmingxie/tcc-transaction" target="_blank" rel="noopener">https://github.com/changmingxie/tcc-transaction</a></p></blockquote><h3 id="运行过程"><a class="markdownIt-Anchor" href="#运行过程"></a> 运行过程</h3><h4 id="准备阶段"><a class="markdownIt-Anchor" href="#准备阶段"></a> 准备阶段</h4><p>协调者询问参与者事务是否执行成功，参与者发回事务执行结果。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/java/javaweb/distributed/architecture/分布式事务两阶段提交-01.jpg!zp" /></div><h4 id="提交阶段"><a class="markdownIt-Anchor" href="#提交阶段"></a> 提交阶段</h4><p>如果事务在每个参与者上都执行成功，事务协调者发送通知让参与者提交事务；否则，协调者发送通知让参与者回滚事务。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/java/javaweb/distributed/architecture/分布式事务两阶段提交-02.jpg!zp" /></div>需要注意的是，在准备阶段，参与者执行了事务，但是还未提交。只有在提交阶段接收到协调者发来的通知后，才进行提交或者回滚。<h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><ul><li><strong>同步阻塞</strong> - 所有事务参与者在等待其它参与者响应的时候都处于同步阻塞状态，无法进行其它操作。</li><li><strong>单点问题</strong> - 协调者在 2PC 中起到非常大的作用，发生故障将会造成很大影响，特别是在阶段二发生故障，所有参与者会一直等待状态，无法完成其它操作。</li><li><strong>数据不一致</strong> - 在阶段二，如果协调者只发送了部分 Commit 消息，此时网络发生异常，那么只有部分参与者接收到 Commit 消息，也就是说只有部分参与者提交了事务，使得系统数据不一致。</li><li><strong>太过保守</strong> - 任意一个节点失败就会导致整个事务失败，没有完善的容错机制。</li></ul><h3 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h3><ul><li>优点：尽量保证了数据的强一致，适合对数据强一致要求很高的关键领域。（其实也不能 100%保证强一致</li><li>缺点：实现复杂，牺牲了可用性，对性能影响较大，不适合高并发高性能场景。</li></ul><h2 id="补偿事务"><a class="markdownIt-Anchor" href="#补偿事务"></a> 补偿事务</h2><blockquote><p>补偿事务（TCC），全称是：<code>Try</code>、<code>Confirm</code>、<code>Cancel</code>。</p><p>其核心思想是：针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作。它分为三个阶段：</p><p>TCC 的。</p><ul><li>Try 阶段：这个阶段说的是对各个服务的资源做检测以及对资源进行<strong>锁定或者预留</strong>。</li><li>Confirm 阶段：这个阶段说的是在各个服务中<strong>执行实际的操作</strong>。</li><li>Cancel 阶段：如果任何一个服务的业务方法执行出错，那么这里就需要<strong>进行补偿</strong>，就是执行已经执行成功的业务逻辑的回滚操作。（把那些执行成功的回滚）</li></ul></blockquote><p>举个例子，假设 Bob 要向 Smith 转账，思路大概是：</p><ol><li>首先在 Try 阶段，要先调用远程接口把 Smith 和 Bob 的钱给冻结起来。</li><li>在 Confirm 阶段，执行远程调用的转账的操作，转账成功进行解冻。</li><li>如果第 2 步执行成功，那么转账成功，如果第二步执行失败，则调用远程冻结接口对应的解冻方法 (Cancel)。</li></ol><p>优缺点：</p><ul><li>优点：跟 2PC 比起来，实现以及流程相对简单了一些，但数据的一致性比 2PC 也要差一些。</li><li>缺点：缺点还是比较明显的，在 2,3 步中都有可能失败。TCC 属于应用层的一种补偿方式，所以需要程序员在实现的时候多写很多补偿的代码，在一些场景中，一些业务流程可能用 TCC 不太好定义及处理。</li></ul><p>这种方案几乎很少人使用，因为<strong>事务回滚</strong>实际上是<strong>严重依赖于自己写代码来回滚和补偿</strong>了，会造成补偿代码巨大。</p><p>但是，也有特殊的使用场景：一般来说跟<strong>钱</strong>相关的，跟钱打交道的，<strong>支付</strong>、<strong>交易</strong>相关的场景，会用 TCC，严格保证分布式事务要么全部成功，要么全部自动回滚，严格保证资金的正确性，保证在资金上不会出现问题。</p><p>而且最好是你的各个业务执行的时间都比较短。</p><p>但是说实话，一般尽量别这么搞，自己手写回滚逻辑，或者是补偿逻辑，实在太恶心了，那个业务代码是很难维护的。</p><h2 id="本地消息表异步确保"><a class="markdownIt-Anchor" href="#本地消息表异步确保"></a> 本地消息表（异步确保）</h2><blockquote><p>本地消息表与业务数据表处于同一个数据库中，这样就能利用本地事务来保证在对这两个表的操作满足事务特性。</p><ol><li>在分布式事务操作的一方完成写业务数据的操作之后向本地消息表发送一个消息，本地事务能保证这个消息一定会被写入本地消息表中。</li><li>之后将本地消息表中的消息转发到 Kafka 等消息队列（MQ）中，如果转发成功则将消息从本地消息表中删除，否则继续重新转发。</li><li>在分布式事务操作的另一方从消息队列中读取一个消息，并执行消息中的操作。</li></ol></blockquote><div align="center"><img src="http://dunwu.test.upcdn.net/cs/java/javaweb/distributed/architecture/分布式事务本地消息.jpg!zp" /></div><p>这种方案遵循 BASE 理论，采用的是最终一致性。</p><p>本地消息表利用了本地事务来实现分布式事务，并且使用了消息队列来保证最终一致性。</p><h3 id="优缺点-2"><a class="markdownIt-Anchor" href="#优缺点-2"></a> 优缺点</h3><ul><li>优点：一种非常经典的实现，避免了分布式事务，实现了最终一致性。</li><li>缺点：消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</li></ul><h2 id="mq-事务消息"><a class="markdownIt-Anchor" href="#mq-事务消息"></a> MQ 事务消息</h2><p>有一些第三方的 MQ 是支持事务消息的，比如 RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交。但是市面上一些主流的 MQ 都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。</p><p>以阿里的 RocketMQ 中间件为例，其思路大致为：</p><ol><li>Prepared 消息，会拿到消息的地址。</li><li>执行本地事务。</li><li>通过第一阶段拿到的地址去访问消息，并修改状态。</li></ol><p>也就是说在业务方法内要想消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了 RocketMQ 会定期扫描消息集群中的事务消息，这时候发现了 Prepared 消息，它会向消息发送者确认，所以生产方需要实现一个 check 接口，RocketMQ 会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</p><h3 id="优缺点-3"><a class="markdownIt-Anchor" href="#优缺点-3"></a> 优缺点</h3><ul><li>优点：实现了最终一致性，不需要依赖本地数据库事务。</li><li>缺点：实现难度大，主流 MQ 不支持。</li></ul><h3 id="两阶段提交方案xa-方案"><a class="markdownIt-Anchor" href="#两阶段提交方案xa-方案"></a> 两阶段提交方案/XA 方案</h3><p>所谓的 XA 方案，即：两阶段提交，有一个<strong>事务管理器</strong>的概念，负责协调多个数据库（资源管理器）的事务，事务管理器先问问各个数据库你准备好了吗？如果每个数据库都回复 ok，那么就正式提交事务，在各个数据库上执行操作；如果任何其中一个数据库回答不 ok，那么就回滚事务。</p><p>这种分布式事务方案，比较适合单块应用里，跨多个库的分布式事务，而且因为严重依赖于数据库层面来搞定复杂的事务，效率很低，绝对不适合高并发的场景。如果要玩儿，那么基于 <code>Spring + JTA</code> 就可以搞定，自己随便搜个 demo 看看就知道了。</p><p>这个方案，我们很少用，一般来说<strong>某个系统内部如果出现跨多个库</strong>的这么一个操作，是<strong>不合规</strong>的。我可以给大家介绍一下， 现在微服务，一个大的系统分成几十个甚至几百个服务。一般来说，我们的规定和规范，是要求<strong>每个服务只能操作自己对应的一个数据库</strong>。</p><p>如果你要操作别的服务对应的库，不允许直连别的服务的库，违反微服务架构的规范，你随便交叉胡乱访问，几百个服务的话，全体乱套，这样的一套服务是没法管理的，没法治理的，可能会出现数据被别人改错，自己的库被别人写挂等情况。</p><p>如果你要操作别人的服务的库，你必须是通过<strong>调用别的服务的接口</strong>来实现，绝对不允许交叉访问别人的数据库。</p><div align="center"><img src="https://github.com/doocs/advanced-java/blob/master/images/distributed-transaction-XA.png"/></div><h3 id="本地消息表"><a class="markdownIt-Anchor" href="#本地消息表"></a> 本地消息表</h3><p>本地消息表其实是国外的 ebay 搞出来的这么一套思想。</p><p>这个大概意思是这样的：</p><ol><li>A 系统在自己本地一个事务里操作同时，插入一条数据到消息表；</li><li>接着 A 系统将这个消息发送到 MQ 中去；</li><li>B 系统接收到消息之后，在一个事务里，往自己本地消息表里插入一条数据，同时执行其他的业务操作，如果这个消息已经被处理过了，那么此时这个事务会回滚，这样<strong>保证不会重复处理消息</strong>；</li><li>B 系统执行成功之后，就会更新自己本地消息表的状态以及 A 系统消息表的状态；</li><li>如果 B 系统处理失败了，那么就不会更新消息表状态，那么此时 A 系统会定时扫描自己的消息表，如果有未处理的消息，会再次发送到 MQ 中去，让 B 再次处理；</li><li>这个方案保证了最终一致性，哪怕 B 事务失败了，但是 A 会不断重发消息，直到 B 那边成功为止。</li></ol><p>这个方案说实话最大的问题就在于<strong>严重依赖于数据库的消息表来管理事务</strong>啥的，如果是高并发场景咋办呢？咋扩展呢？所以一般确实很少用。</p><div align="center"><img src="https://github.com/doocs/advanced-java/blob/master/images/distributed-transaction-local-message-table.png"/></div><h3 id="可靠消息最终一致性方案"><a class="markdownIt-Anchor" href="#可靠消息最终一致性方案"></a> 可靠消息最终一致性方案</h3><p>这个的意思，就是干脆不要用本地的消息表了，直接基于 MQ 来实现事务。比如阿里的 RocketMQ 就支持消息事务。</p><p>大概的意思就是：</p><ol><li>A 系统先发送一个 prepared 消息到 mq，如果这个 prepared 消息发送失败那么就直接取消操作别执行了；</li><li>如果这个消息发送成功过了，那么接着执行本地事务，如果成功就告诉 mq 发送确认消息，如果失败就告诉 mq 回滚消息；</li><li>如果发送了确认消息，那么此时 B 系统会接收到确认消息，然后执行本地的事务；</li><li>mq 会自动<strong>定时轮询</strong>所有 prepared 消息回调你的接口，问你，这个消息是不是本地事务处理失败了，所有没发送确认的消息，是继续重试还是回滚？一般来说这里你就可以查下数据库看之前本地事务是否执行，如果回滚了，那么这里也回滚吧。这个就是避免可能本地事务执行成功了，而确认消息却发送失败了。</li><li>这个方案里，要是系统 B 的事务失败了咋办？重试咯，自动不断重试直到成功，如果实在是不行，要么就是针对重要的资金类业务进行回滚，比如 B 系统本地回滚后，想办法通知系统 A 也回滚；或者是发送报警由人工来手工回滚和补偿。</li><li>这个还是比较合适的，目前国内互联网公司大都是这么玩儿的，要不你举用 RocketMQ 支持的，要不你就自己基于类似 ActiveMQ？RabbitMQ？自己封装一套类似的逻辑出来，总之思路就是这样子的。</li></ol><div align="center"><img src="https://github.com/doocs/advanced-java/blob/master/images/distributed-transaction-reliable-message.png"/></div><h3 id="最大努力通知方案"><a class="markdownIt-Anchor" href="#最大努力通知方案"></a> 最大努力通知方案</h3><p>这个方案的大致意思就是：</p><ol><li>系统 A 本地事务执行完之后，发送个消息到 MQ；</li><li>这里会有个专门消费 MQ 的<strong>最大努力通知服务</strong>，这个服务会消费 MQ 然后写入数据库中记录下来，或者是放入个内存队列也可以，接着调用系统 B 的接口；</li><li>要是系统 B 执行成功就 ok 了；要是系统 B 执行失败了，那么最大努力通知服务就定时尝试重新调用系统 B，反复 N 次，最后还是不行就放弃。</li></ol><h3 id="你们公司是如何处理分布式事务的"><a class="markdownIt-Anchor" href="#你们公司是如何处理分布式事务的"></a> 你们公司是如何处理分布式事务的？</h3><p>如果你真的被问到，可以这么说，我们某某特别严格的场景，用的是 TCC 来保证强一致性；然后其他的一些场景基于阿里的 RocketMQ 来实现分布式事务。</p><p>你找一个严格资金要求绝对不能错的场景，你可以说你是用的 TCC 方案；如果是一般的分布式事务场景，订单插入之后要调用库存服务更新库存，库存数据没有资金那么的敏感，可以用可靠消息最终一致性方案。</p><p>友情提示一下，RocketMQ 3.2.6 之前的版本，是可以按照上面的思路来的，但是之后接口做了一些改变，我这里不再赘述了。</p><p>当然如果你愿意，你可以参考可靠消息最终一致性方案来自己实现一套分布式事务，比如基于 RocketMQ 来玩儿。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html" target="_blank" rel="noopener">聊聊分布式事务，再说说解决方案</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式事务&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式事务&quot;&gt;&lt;/a&gt; 分布式事务&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;分布式事务指的是事务操作跨越多个节点，并且要求满足事务的 ACID 特性。&lt;/str
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/categories/design/distributed/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/tags/distributed/"/>
    
      <category term="transaction" scheme="https://dunwu.github.io/blog/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁</title>
    <link href="https://dunwu.github.io/blog/design/distributed/distributed-lock/"/>
    <id>https://dunwu.github.io/blog/design/distributed/distributed-lock/</id>
    <published>2019-06-04T15:42:00.000Z</published>
    <updated>2019-08-21T04:00:17.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式锁"><a class="markdownIt-Anchor" href="#分布式锁"></a> 分布式锁</h1><p>Java 原生 API 虽然有并发锁，但并没有提供分布式锁的能力，所以针对分布式场景中的锁需要解决的方案。</p><p>分布式锁的解决方案大致有以下几种：</p><ul><li>基于数据库实现</li><li>基于缓存（redis，memcached 等）实现</li><li>基于 Zookeeper 实现 ✅</li></ul><blockquote><p>注：推荐基于 ZooKeeper 实现分布式锁，具体原因看完本文即可明了。</p></blockquote><h2 id="分布式锁思路"><a class="markdownIt-Anchor" href="#分布式锁思路"></a> 分布式锁思路</h2><p>分布式锁的总体思路大同小异，仅在实现细节上有所不同。</p><p>分布式锁的主要思路如下：</p><ol><li><strong>互斥</strong> - 创建锁必须是唯一的，表现形式为向数据存储服务器或容器插入一个唯一的 key，一旦有一个线程插入这个 key，其他线程就不能再插入了。</li><li>避免永远不释放锁 - 数据库分布式锁和缓存分布式锁（Redis）的思路都是引入超时机制，即成功申请锁后，超过一定时间，锁失效（删除 key），原因在于它们无法感知申请锁的客户端节点状态。而 ZooKeeper 由于其 znode 以目录、文件形式组织，天然就存在物理空间隔离，只要 znode 存在，即表示客户端节点还在工作，所以不存在这种问题。</li><li>容错（只要大部分 redis 节点创建了这把锁就可以）</li></ol><h2 id="数据库分布式锁"><a class="markdownIt-Anchor" href="#数据库分布式锁"></a> 数据库分布式锁</h2><h3 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h3><p>（1）创建表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`methodLock`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`method_name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'锁定的方法名'</span>,</span><br><span class="line">  <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'备注信息'</span>,</span><br><span class="line">  <span class="string">`update_time`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'保存数据时间，自动生成'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`uidx_method_name`</span> (<span class="string">`method_name `</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COMMENT</span>=<span class="string">'锁定中的方法'</span>;</span><br></pre></td></tr></table></figure><p>（2）获取锁</p><p>想要锁住某个方法时，执行以下 SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> methodLock(method_name,<span class="keyword">desc</span>) <span class="keyword">values</span> (‘method_name’,‘<span class="keyword">desc</span>’)</span><br></pre></td></tr></table></figure><p>因为我们对 <code>method_name</code> 做了唯一性约束，这里如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行方法体内容。</p><p>成功插入则获取锁。</p><p>（3）释放锁</p><p>当方法执行完毕之后，想要释放锁的话，需要执行以下 Sql:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> methodLock <span class="keyword">where</span> method_name =<span class="string">'method_name'</span></span><br></pre></td></tr></table></figure><h3 id="问题"><a class="markdownIt-Anchor" href="#问题"></a> 问题</h3><ul><li>这把锁强依赖数据库的可用性。如果数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用。</li><li>这把锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。</li><li>这把锁只能是非阻塞的，因为数据的 insert 操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作。</li><li>这把锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁。因为数据中数据已经存在了。</li></ul><h3 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法</h3><ul><li>单点问题可以用多数据库实例，同时塞 N 个表，N/2+1 个成功就任务锁定成功</li><li>写一个定时任务，隔一段时间清除一次过期的数据。</li><li>写一个 while 循环，不断的重试插入，直到成功。</li><li>在数据库表中加个字段，记录当前获得锁的机器的主机信息和线程信息，那么下次再获取锁的时候先查询数据库，如果当前机器的主机信息和线程信息在数据库可以查到的话，直接把锁分配给他就可以了。</li></ul><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><ul><li>优点: 直接借助数据库，容易理解。</li><li>缺点: 会有各种各样的问题，在解决问题的过程中会使整个方案变得越来越复杂。操作数据库需要一定的开销，性能问题需要考虑。</li></ul><h2 id="redis-分布式锁"><a class="markdownIt-Anchor" href="#redis-分布式锁"></a> Redis 分布式锁</h2><p>相比于用数据库来实现分布式锁，基于缓存实现的分布式锁的性能会更好一些。目前有很多成熟的分布式产品，包括 Redis、memcache、Tair 等。这里以 Redis 举例。</p><h3 id="实现思路"><a class="markdownIt-Anchor" href="#实现思路"></a> 实现思路</h3><p>这个分布式锁有 3 个重要的考量点：</p><ol><li>互斥（只能有一个客户端获取锁）</li><li>不能死锁</li><li>容错（只要大部分 redis 节点创建了这把锁就可以）</li></ol><p>对应的 Redis 指令如下：</p><ul><li><code>setnx</code> - <code>setnx key val</code>：当且仅当 key 不存在时，set 一个 key 为 val 的字符串，返回 1；若 key 存在，则什么都不做，返回 0。</li><li><code>expire</code> - <code>expire key timeout</code>：为 key 设置一个超时时间，单位为 second，超过这个时间锁会自动释放，避免死锁。</li><li><code>delete</code> - <code>delete key</code>：删除 key</li></ul><h3 id="具体实现-2"><a class="markdownIt-Anchor" href="#具体实现-2"></a> 具体实现</h3><p>（1）申请锁</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> resource_name <span class="comment">my_random_value NX PX 30000</span></span><br></pre></td></tr></table></figure><p>执行这个命令就 ok。</p><ul><li><code>NX</code>：表示只有 <code>key</code> 不存在的时候才会设置成功。（如果此时 redis 中存在这个 key，那么设置失败，返回 <code>nil</code>）</li><li><code>PX 30000</code>：意思是 30s 后锁自动释放。别人创建的时候如果发现已经有了就不能加锁了。</li></ul><p>（2）释放锁</p><p>释放锁就是删除 key ，但是一般可以用 <code>lua</code> 脚本删除，判断 value 一样才删除：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- 删除锁的时候，找到 key 对应的 value，跟自己传过去的 value 做比较，如果是一样的才删除。</span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">"get"</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] then</span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">"del"</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><h3 id="小结-2"><a class="markdownIt-Anchor" href="#小结-2"></a> 小结</h3><p>为啥要用 <code>random_value</code> 随机值呢？因为如果某个客户端获取到了锁，但是阻塞了很长时间才执行完，比如说超过了 30s，此时可能已经自动释放锁了，此时可能别的客户端已经获取到了这个锁，要是你这个时候直接删除 key 的话会有问题，所以得用随机值加上面的 <code>lua</code> 脚本来释放锁。</p><p>但是这样是肯定不行的。因为如果是普通的 redis 单实例，那就是单点故障。或者是 redis 普通主从，那 redis 主从异步复制，如果主节点挂了（key 就没有了），key 还没同步到从节点，此时从节点切换为主节点，别人就可以 set key，从而拿到锁。</p><h3 id="redlock-算法"><a class="markdownIt-Anchor" href="#redlock-算法"></a> RedLock 算法</h3><p>这个场景是假设有一个 redis cluster，有 5 个 redis master 实例。然后执行如下步骤获取一把锁：</p><ol><li>获取当前时间戳，单位是毫秒；</li><li>跟上面类似，轮流尝试在每个 master 节点上创建锁，过期时间较短，一般就几十毫秒；</li><li>尝试在<strong>大多数节点</strong>上建立一个锁，比如 5 个节点就要求是 3 个节点 <code>n / 2 + 1</code>；</li><li>客户端计算建立好锁的时间，如果建立锁的时间小于超时时间，就算建立成功了；</li><li>要是锁建立失败了，那么就依次之前建立过的锁删除；</li><li>只要别人建立了一把分布式锁，你就得<strong>不断轮询去尝试获取锁</strong>。</li></ol><p><a href="https://redis.io/" target="_blank" rel="noopener">Redis 官方</a>给出了以上两种基于 Redis 实现分布式锁的方法，详细说明可以查看：<a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">https://redis.io/topics/distlock</a> 。</p><h2 id="zookeeper-分布式锁"><a class="markdownIt-Anchor" href="#zookeeper-分布式锁"></a> ZooKeeper 分布式锁</h2><h3 id="实现思路-2"><a class="markdownIt-Anchor" href="#实现思路-2"></a> 实现思路</h3><p>这也是 ZooKeeper 客户端 curator 的分布式锁实现。</p><ol><li>创建一个目录 mylock；</li><li>线程 A 想获取锁就在 mylock 目录下创建临时顺序节点；</li><li>获取 mylock 目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁；</li><li>线程 B 获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；</li><li>线程 A 处理完，删除自己的节点，线程 B 监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</li></ol><h3 id="具体实现-3"><a class="markdownIt-Anchor" href="#具体实现-3"></a> 具体实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ZooKeeperSession</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bingo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018/11/29</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch connectedSemaphore = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zookeeper;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeperSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.zookeeper = <span class="keyword">new</span> ZooKeeper(<span class="string">"192.168.31.187:2181,192.168.31.19:2181,192.168.31.227:2181"</span>, <span class="number">50000</span>, <span class="keyword">new</span> ZooKeeperWatcher());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connectedSemaphore.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"ZooKeeper session established......"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">acquireDistributedLock</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"/product-lock-"</span> + productId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zookeeper.create(path, <span class="string">""</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 相当于是给node注册一个监听器，去看看这个监听器是否存在</span></span><br><span class="line">                    Stat stat = zk.exists(path, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">this</span>.latch.await(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">                        <span class="keyword">this</span>.latch = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    zookeeper.create(path, <span class="string">""</span>.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放掉一个分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseDistributedLock</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"/product-lock-"</span> + productId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zookeeper.delete(path, -<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"release the lock for product[id="</span> + productId + <span class="string">"]......"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立zk session的watcher</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> bingo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2018/11/29</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperWatcher</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Receive watched event: "</span> + event.getState());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (KeeperState.SyncConnected == event.getState()) &#123;</span><br><span class="line">                connectedSemaphore.countDown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.latch != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.latch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装单例的静态内部类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> bingo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 2018/11/29</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeperSession instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> ZooKeeperSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeperSession <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZooKeeperSession <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化单例的便捷方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以采用另一种方式，创建临时顺序节点：</p><p>如果有一把锁，被多个人给竞争，此时多个人会排队，第一个拿到锁的人会执行，然后释放锁；后面的每个人都会去监听<strong>排在自己前面</strong>的那个人创建的 node 上，一旦某个人释放了锁，排在自己后面的人就会被 zookeeper 给通知，一旦被通知了之后，就 ok 了，自己就获取到了锁，就可以执行代码了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperDistributedLock</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk;</span><br><span class="line">    <span class="keyword">private</span> String locksRoot = <span class="string">"/locks"</span>;</span><br><span class="line">    <span class="keyword">private</span> String productId;</span><br><span class="line">    <span class="keyword">private</span> String waitNode;</span><br><span class="line">    <span class="keyword">private</span> String lockNode;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch connectedLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sessionTimeout = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeperDistributedLock</span><span class="params">(String productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String address = <span class="string">"192.168.31.187:2181,192.168.31.19:2181,192.168.31.227:2181"</span>;</span><br><span class="line">            zk = <span class="keyword">new</span> ZooKeeper(address, sessionTimeout, <span class="keyword">this</span>);</span><br><span class="line">            connectedLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getState() == KeeperState.SyncConnected) &#123;</span><br><span class="line">            connectedLatch.countDown();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.latch != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.latch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquireDistributedLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                waitForLock(waitNode, sessionTimeout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 传入进去的locksRoot + “/” + productId</span></span><br><span class="line">    <span class="comment">// 假设productId代表了一个商品id，比如说1</span></span><br><span class="line">    <span class="comment">// locksRoot = locks</span></span><br><span class="line">    <span class="comment">// /locks/10000000000，/locks/10000000001，/locks/10000000002</span></span><br><span class="line">            lockNode = zk.create(locksRoot + <span class="string">"/"</span> + productId, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 看看刚创建的节点是不是最小的节点</span></span><br><span class="line">     <span class="comment">// locks：10000000000，10000000001，10000000002</span></span><br><span class="line">            List&lt;String&gt; locks = zk.getChildren(locksRoot, <span class="keyword">false</span>);</span><br><span class="line">            Collections.sort(locks);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(lockNode.equals(locksRoot+<span class="string">"/"</span>+ locks.get(<span class="number">0</span>)))&#123;</span><br><span class="line">                <span class="comment">//如果是最小的节点,则表示取得锁</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果不是最小的节点，找到比自己小1的节点</span></span><br><span class="line">  <span class="keyword">int</span> previousLockIndex = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; locks.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(lockNode.equals(locksRoot + “/” + locks.get(i))) &#123;</span><br><span class="line">             previousLockIndex = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">this</span>.waitNode = locks.get(previousLockIndex);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">waitForLock</span><span class="params">(String waitNode, <span class="keyword">long</span> waitTime)</span> <span class="keyword">throws</span> InterruptedException, KeeperException </span>&#123;</span><br><span class="line">        Stat stat = zk.exists(locksRoot + <span class="string">"/"</span> + waitNode, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">this</span>.latch.await(waitTime, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">this</span>.latch = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 删除/locks/10000000000节点</span></span><br><span class="line">            <span class="comment">// 删除/locks/10000000001节点</span></span><br><span class="line">            System.out.println(<span class="string">"unlock "</span> + lockNode);</span><br><span class="line">            zk.delete(lockNode, -<span class="number">1</span>);</span><br><span class="line">            lockNode = <span class="keyword">null</span>;</span><br><span class="line">            zk.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LockException</span><span class="params">(String e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LockException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结-3"><a class="markdownIt-Anchor" href="#小结-3"></a> 小结</h3><p>ZooKeeper 版本的分布式锁问题相对比较来说少。</p><ul><li>锁的占用时间限制：redis 就有占用时间限制，而 ZooKeeper 则没有，最主要的原因是 redis 目前没有办法知道已经获取锁的客户端的状态，是已经挂了呢还是正在执行耗时较长的业务逻辑。而 ZooKeeper 通过临时节点就能清晰知道，如果临时节点存在说明还在执行业务逻辑，如果临时节点不存在说明已经执行完毕释放锁或者是挂了。由此看来 redis 如果能像 ZooKeeper 一样添加一些与客户端绑定的临时键，也是一大好事。</li><li>是否单点故障：redis 本身有很多中玩法，如客户端一致性 hash，服务器端 sentinel 方案或者 cluster 方案，很难做到一种分布式锁方式能应对所有这些方案。而 ZooKeeper 只有一种玩法，多台机器的节点数据是一致的，没有 redis 的那么多的麻烦因素要考虑。</li></ul><p>总体上来说 ZooKeeper 实现分布式锁更加的简单，可靠性更高。但 ZooKeeper 因为需要频繁的创建和删除节点，性能上不如 Redis 方式。</p><h2 id="分布式锁方案对比"><a class="markdownIt-Anchor" href="#分布式锁方案对比"></a> 分布式锁方案对比</h2><ul><li><p>数据库分布式锁，问题比较多，解决起来比较麻烦，不推荐</p></li><li><p>redis 分布式锁，其实<strong>需要自己不断去尝试获取锁</strong>，比较消耗性能。</p></li><li><p>zk 分布式锁，获取不到锁，注册个监听器即可，不需要不断主动尝试获取锁，性能开销较小。</p></li></ul><p>另外一点就是，如果是 redis 获取锁的那个客户端出现 bug 挂了，那么只能等待超时时间之后才能释放锁；而 zk 的话，因为创建的是临时 znode，只要客户端挂了，znode 就没了，此时就自动释放锁。</p><p>总体上来说，ZooKeeper 实现分布式锁更加的简单，可靠性更高。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://juejin.im/post/5a20cd8bf265da43163cdd9a" target="_blank" rel="noopener">分布式锁实现汇总</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式锁&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式锁&quot;&gt;&lt;/a&gt; 分布式锁&lt;/h1&gt;
&lt;p&gt;Java 原生 API 虽然有并发锁，但并没有提供分布式锁的能力，所以针对分布式场景中的锁需要解决的方案。&lt;/p&gt;
&lt;p&gt;分布式锁的
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/categories/design/distributed/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/tags/distributed/"/>
    
      <category term="lock" scheme="https://dunwu.github.io/blog/tags/lock/"/>
    
  </entry>
  
  <entry>
    <title>分布式会话</title>
    <link href="https://dunwu.github.io/blog/design/distributed/distributed-session/"/>
    <id>https://dunwu.github.io/blog/design/distributed/distributed-session/</id>
    <published>2019-06-04T15:42:00.000Z</published>
    <updated>2019-08-21T05:20:31.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式会话"><a class="markdownIt-Anchor" href="#分布式会话"></a> 分布式会话</h1><h2 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h2><h3 id="什么是-session"><a class="markdownIt-Anchor" href="#什么是-session"></a> 什么是 Session？</h3><p>session 是啥？浏览器有个 cookie，在一段时间内这个 cookie 都存在，然后每次发请求过来都带上一个特殊的 <code>jsessionid cookie</code>，就根据这个东西，在服务端可以维护一个对应的 session 域，里面可以放点数据。</p><p>一般的话只要你没关掉浏览器，cookie 还在，那么对应的那个 session 就在，但是如果 cookie 没了，session 也就没了。常见于什么购物车之类的东西，还有登录状态保存之类的。</p><h3 id="什么是分布式-session"><a class="markdownIt-Anchor" href="#什么是分布式-session"></a> 什么是分布式 Session？</h3><p>在分布式场景下，一个用户的 Session 如果只存储在一个服务器上，那么当负载均衡器把用户的下一个请求转发到另一个服务器上，该服务器没有用户的 Session，就可能导致用户需要重新进行登录等操作。</p><p>分布式 Session 的几种实现策略：</p><ol><li>粘性 session</li><li>应用服务器间的 session 复制共享</li><li>基于缓存的 session 共享 ✅</li></ol><blockquote><p>推荐：基于缓存的 session 共享</p></blockquote><h2 id="粘性-session"><a class="markdownIt-Anchor" href="#粘性-session"></a> 粘性 Session</h2><blockquote><p>粘性 Session（Sticky Sessions）需要配置负载均衡器，使得一个用户的所有请求都路由到一个服务器节点上，这样就可以把用户的 Session 存放在该服务器节点中。</p><p>缺点：当服务器节点宕机时，将丢失该服务器节点上的所有 Session。</p></blockquote><div align="center"><img src="http://dunwu.test.upcdn.net/cs/java/javaweb/distributed/architecture/MultiNode-StickySessions.jpg!zp" /></div><h2 id="session-复制共享"><a class="markdownIt-Anchor" href="#session-复制共享"></a> session 复制共享</h2><blockquote><p>Session 复制共享（Session Replication）在服务器节点之间进行 Session 同步操作，这样的话用户可以访问任何一个服务器节点。</p><p>缺点：占用过多内存；同步过程占用网络带宽以及服务器处理器时间。</p></blockquote><div align="center"><img src="http://dunwu.test.upcdn.net/cs/java/javaweb/distributed/architecture/MultiNode-SessionReplication.jpg!zp" /></div><h2 id="基于缓存的-session-共享"><a class="markdownIt-Anchor" href="#基于缓存的-session-共享"></a> 基于缓存的 session 共享</h2><blockquote><p>使用一个单独的存储服务器存储 Session 数据，可以存在 MySQL 数据库上，也可以存在 Redis 或者 Memcached 这种内存型数据库。</p><p>缺点：需要去实现存取 Session 的代码。</p></blockquote><div align="center"><img src="http://dunwu.test.upcdn.net/cs/java/javaweb/distributed/architecture/MultiNode-SpringSession.jpg!zp" /></div><h2 id="具体实现"><a class="markdownIt-Anchor" href="#具体实现"></a> 具体实现</h2><h3 id="jwt-token"><a class="markdownIt-Anchor" href="#jwt-token"></a> JWT Token</h3><p>使用 JWT Token 储存用户身份，然后再从数据库或者 cache 中获取其他的信息。这样无论请求分配到哪个服务器都无所谓。</p><h3 id="tomcat-redis"><a class="markdownIt-Anchor" href="#tomcat-redis"></a> tomcat + redis</h3><p>这个其实还挺方便的，就是使用 session 的代码，跟以前一样，还是基于 tomcat 原生的 session 支持即可，然后就是用一个叫做 <code>Tomcat RedisSessionManager</code> 的东西，让所有我们部署的 tomcat 都将 session 数据存储到 redis 即可。</p><p>在 tomcat 的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">host</span>=<span class="string">"&#123;redis.host&#125;"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">port</span>=<span class="string">"&#123;redis.port&#125;"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">database</span>=<span class="string">"&#123;redis.dbnum&#125;"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">maxInactiveInterval</span>=<span class="string">"60"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>然后指定 redis 的 host 和 port 就 ok 了。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">sentinelMaster</span>=<span class="string">"mymaster"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">sentinels</span>=<span class="string">"&lt;sentinel1-ip&gt;:26379,&lt;sentinel2-ip&gt;:26379,&lt;sentinel3-ip&gt;:26379"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">maxInactiveInterval</span>=<span class="string">"60"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>还可以用上面这种方式基于 redis 哨兵支持的 redis 高可用集群来保存 session 数据，都是 ok 的。</p><h3 id="spring-session-redis"><a class="markdownIt-Anchor" href="#spring-session-redis"></a> spring session + redis</h3><p>上面那种 tomcat + redis 的方式好用，但是会<strong>严重依赖于 web 容器</strong>，不好将代码移植到其他 web 容器上去，尤其是你要是换了技术栈咋整？比如换成了 spring cloud 或者是 spring boot 之类的呢？</p><p>所以现在比较好的还是基于 Java 一站式解决方案，也就是 spring。人家 spring 基本上承包了大部分我们需要使用的框架，spirng cloud 做微服务，spring boot 做脚手架，所以用 sping session 是一个很好的选择。</p><p>在 pom.xml 中配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 spring 配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisHttpSessionConfiguration"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">"org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInactiveIntervalInSeconds"</span> <span class="attr">value</span>=<span class="string">"600"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis_hostname&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis_port&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis_pwd&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"3000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePool"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 web.xml 中配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSessionRepositoryFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSessionRepositoryFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/putIntoSession"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putIntoSession</span><span class="params">(HttpServletRequest request, String username)</span> </span>&#123;</span><br><span class="line">        request.getSession().setAttribute(<span class="string">"name"</span>,  <span class="string">"leo"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getFromSession"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFromSession</span><span class="params">(HttpServletRequest request, Model model)</span></span>&#123;</span><br><span class="line">        String name = request.getSession().getAttribute(<span class="string">"name"</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码就是 ok 的，给 sping session 配置基于 redis 来存储 session 数据，然后配置了一个 spring session 的过滤器，这样的话，session 相关操作都会交给 spring session 来管了。接着在代码中，就用原生的 session 操作，就是直接基于 spring sesion 从 redis 中获取数据了。</p><p>实现分布式的会话有很多种方式，我说的只不过是比较常见的几种方式，tomcat + redis 早期比较常用，但是会重耦合到 tomcat 中；近些年，通过 spring session 来实现。</p><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li><a href="https://github.com/L316476844/distributed-session" target="_blank" rel="noopener">集群/分布式环境 Session 的几种策略</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式会话&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式会话&quot;&gt;&lt;/a&gt; 分布式会话&lt;/h1&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概念&quot;&gt;&lt;/a&gt; 概念&lt;/h2&gt;
&lt;
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/categories/design/distributed/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="distributed" scheme="https://dunwu.github.io/blog/tags/distributed/"/>
    
      <category term="session" scheme="https://dunwu.github.io/blog/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>Title</title>
    <link href="https://dunwu.github.io/blog/design/architecture/README/"/>
    <id>https://dunwu.github.io/blog/design/architecture/README/</id>
    <published>2019-03-08T05:16:53.000Z</published>
    <updated>2019-05-08T10:07:49.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="架构设计"><a class="markdownIt-Anchor" href="#架构设计"></a> 架构设计</h1><p>架构设计是为业务服务，<strong>脱离业务实际的架构设计都是纸上谈兵</strong>。</p><p>架构设计需要根据架构师自身的经验，在实现业务功能、性能、扩展性、系统复杂度等维度上综合考量以及权衡。而架构设计的经验需要架构师不断的学习、不断的积累。性能、扩展性、系统复杂度等方面有很多个专题，有必要针对每个专题由浅入深的去理解、掌握。</p><h2 id="专题"><a class="markdownIt-Anchor" href="#专题"></a> 专题</h2><h2 id="如何设计"><a class="markdownIt-Anchor" href="#如何设计"></a> 如何设计</h2><h3 id="第一步需求分析"><a class="markdownIt-Anchor" href="#第一步需求分析"></a> 第一步：需求分析</h3><p>需求分析阶段，要做的就是<strong>分析使用场景，约束和假设</strong>。</p><p>这个阶段，应该以审视的角度，不断提问、求证，以挖掘用户真实的需求。</p><ul><li>系统是什么？系统有什么功能？</li><li>谁是系统的用户群体？用户群体的规模是多大？</li><li>系统的输入输出分别是什么？</li><li>系统希望处理多少数据？</li><li>系统希望每秒钟处理多少请求？</li><li>系统希望的读写比率？</li></ul><h3 id="第二步概要设计"><a class="markdownIt-Anchor" href="#第二步概要设计"></a> 第二步：概要设计</h3><p>创造一个高层级的设计</p><h3 id="第三步详细设计"><a class="markdownIt-Anchor" href="#第三步详细设计"></a> 第三步：详细设计</h3><ul><li>数据库选型：SQL 还是 NOSQL</li><li>数据库模型</li><li>API 和面向对象设计</li></ul><h3 id="第四步扩展设计"><a class="markdownIt-Anchor" href="#第四步扩展设计"></a> 第四步：扩展设计</h3><ul><li>负载均衡</li><li>水平扩展</li><li>缓存</li><li>数据库分片</li><li>消息队列</li></ul><h2 id="扩展阅读"><a class="markdownIt-Anchor" href="#扩展阅读"></a> 扩展阅读</h2><h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2><ul><li>文章<ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md" target="_blank" rel="noopener">系统设计入门</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;架构设计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#架构设计&quot;&gt;&lt;/a&gt; 架构设计&lt;/h1&gt;
&lt;p&gt;架构设计是为业务服务，&lt;strong&gt;脱离业务实际的架构设计都是纸上谈兵&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;架构设计需要根据架构师自
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
      <category term="architecture" scheme="https://dunwu.github.io/blog/categories/design/architecture/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="architecture" scheme="https://dunwu.github.io/blog/tags/architecture/"/>
    
  </entry>
  
  <entry>
    <title>军事</title>
    <link href="https://dunwu.github.io/blog/minds/%E4%BA%BA%E6%96%87/%E5%86%9B%E4%BA%8B/README/"/>
    <id>https://dunwu.github.io/blog/minds/%E4%BA%BA%E6%96%87/%E5%86%9B%E4%BA%8B/README/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-05-08T10:07:52.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="军事"><a class="markdownIt-Anchor" href="#军事"></a> 军事</h1><blockquote><p>军事是与战争、军队、军人等有关事务的总称。</p></blockquote><h2 id="关键词"><a class="markdownIt-Anchor" href="#关键词"></a> 关键词</h2><p>战争、战役、战斗、战士、战略、战术、武器、兵种、进攻、防御、指挥、兵法、军衔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;军事&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#军事&quot;&gt;&lt;/a&gt; 军事&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;军事是与战争、军队、军人等有关事务的总称。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关键词&quot;&gt;&lt;a cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>合理编排你的技术文档</title>
    <link href="https://dunwu.github.io/blog/method/doc-style/"/>
    <id>https://dunwu.github.io/blog/method/doc-style/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-10-21T10:06:24.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术文档规范"><a class="markdownIt-Anchor" href="#技术文档规范"></a> 技术文档规范</h1><blockquote><p>文档采用 Markdown 语法书写。</p><p>📚 「参考」Markdown 语法可以参考：</p><ul><li><a href="https://github.com/guodongxiaren/README" target="_blank" rel="noopener">https://github.com/guodongxiaren/README</a></li><li><a href="https://github.com/tchapi/markdown-cheatsheet" target="_blank" rel="noopener">https://github.com/tchapi/markdown-cheatsheet</a></li></ul></blockquote><!-- TOC depthFrom:2 depthTo:3 --><ul><li><a href="#1-%E6%A0%87%E9%A2%98">1. 标题</a><ul><li><a href="#11-%E6%A0%87%E9%A2%98%E5%B1%82%E7%BA%A7">1.1. 标题层级</a></li><li><a href="#12-%E6%A0%87%E9%A2%98%E5%8E%9F%E5%88%99">1.2. 标题原则</a></li></ul></li><li><a href="#2-%E6%96%87%E6%9C%AC">2. 文本</a><ul><li><a href="#21-%E5%AD%97%E9%97%B4%E8%B7%9D">2.1. 字间距</a></li><li><a href="#22-%E5%8F%A5%E5%AD%90">2.2. 句子</a></li><li><a href="#23-%E5%86%99%E4%BD%9C%E9%A3%8E%E6%A0%BC">2.3. 写作风格</a></li><li><a href="#24-%E8%8B%B1%E6%96%87%E5%A4%84%E7%90%86">2.4. 英文处理</a></li></ul></li><li><a href="#3-%E6%AE%B5%E8%90%BD">3. 段落</a><ul><li><a href="#31-%E6%AE%B5%E8%90%BD%E5%8E%9F%E5%88%99">3.1. 段落原则</a></li><li><a href="#32-%E5%BC%95%E7%94%A8">3.2. 引用</a></li><li><a href="#33-%E5%BC%BA%E8%B0%83">3.3. 强调</a></li></ul></li><li><a href="#4-%E6%95%B0%E5%80%BC">4. 数值</a><ul><li><a href="#41-%E5%8D%8A%E8%A7%92%E6%95%B0%E5%AD%97">4.1. 半角数字</a></li><li><a href="#42-%E5%8D%83%E5%88%86%E5%8F%B7">4.2. 千分号</a></li><li><a href="#43-%E8%B4%A7%E5%B8%81">4.3. 货币</a></li><li><a href="#44-%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4">4.4. 数值范围</a></li><li><a href="#45-%E5%8F%98%E5%8C%96%E7%A8%8B%E5%BA%A6%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%B3%95">4.5. 变化程度的表示法</a></li></ul></li><li><a href="#5-%E7%AC%A6%E5%8F%B7">5. 符号</a><ul><li><a href="#51-%E7%AC%A6%E5%8F%B7%E5%8E%9F%E5%88%99">5.1. 符号原则</a></li><li><a href="#52-%E5%8F%A5%E5%8F%B7">5.2. 句号</a></li><li><a href="#53-%E9%80%97%E5%8F%B7">5.3. 逗号</a></li><li><a href="#54-%E9%A1%BF%E5%8F%B7">5.4. 顿号</a></li><li><a href="#55-%E5%88%86%E5%8F%B7">5.5. 分号</a></li><li><a href="#56-%E5%BC%95%E5%8F%B7">5.6. 引号</a></li><li><a href="#57-%E5%9C%86%E6%8B%AC%E5%8F%B7">5.7. 圆括号</a></li><li><a href="#58-%E5%86%92%E5%8F%B7">5.8. 冒号</a></li><li><a href="#59-%E7%9C%81%E7%95%A5%E5%8F%B7">5.9. 省略号</a></li><li><a href="#510-%E6%84%9F%E5%8F%B9%E5%8F%B7">5.10. 感叹号</a></li><li><a href="#511-%E7%A0%B4%E6%8A%98%E5%8F%B7">5.11. 破折号</a></li><li><a href="#512-%E8%BF%9E%E6%8E%A5%E5%8F%B7">5.12. 连接号</a></li></ul></li><li><a href="#6-%E7%BB%93%E6%9E%84">6. 结构</a><ul><li><a href="#61-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">6.1. 目录结构</a></li><li><a href="#62-%E6%96%87%E4%BB%B6%E5%90%8D">6.2. 文件名</a></li></ul></li><li><a href="#7-emoji">7. Emoji</a></li><li><a href="#8-%E5%8F%82%E8%80%83">8. 参考</a></li></ul><!-- /TOC --><h2 id="1-标题"><a class="markdownIt-Anchor" href="#1-标题"></a> 1. 标题</h2><h3 id="11-标题层级"><a class="markdownIt-Anchor" href="#11-标题层级"></a> 1.1. 标题层级</h3><p>标题分为四级。</p><ol><li>一级标题：文章的标题</li><li>二级标题：文章内容的大标题</li><li>三级标题：二级标题下一级的标题</li><li>四级标题：三级标题下一级的标题</li></ol><h3 id="12-标题原则"><a class="markdownIt-Anchor" href="#12-标题原则"></a> 1.2. 标题原则</h3><ul><li>一篇文章中应该尽力避免同名标题。</li><li>一级标题下，不能直接出现三级标题。</li><li>标题要避免孤立编号（即同级标题只有一个）。</li><li>下级标题不重复上一级标题的内容。</li><li>谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</li></ul><h2 id="2-文本"><a class="markdownIt-Anchor" href="#2-文本"></a> 2. 文本</h2><h3 id="21-字间距"><a class="markdownIt-Anchor" href="#21-字间距"></a> 2.1. 字间距</h3><p>全角中文字符与半角英文字符之间，应有一个半角空格。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：本文介绍如何快速启动Windows系统。</span><br><span class="line"></span><br><span class="line">正例：本文介绍如何快速启动 Windows 系统。</span><br></pre></td></tr></table></figure><p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">正例：<span class="number">2011</span>年<span class="number">5</span>月<span class="number">15</span>日，我订购了<span class="number">5</span>台笔记本电脑与<span class="number">10</span>台平板电脑。</span><br><span class="line"></span><br><span class="line">正例：<span class="number">2011</span> 年 <span class="number">5</span> 月 <span class="number">15</span> 日，我订购了 <span class="number">5</span> 台笔记本电脑与 <span class="number">10</span> 台平板电脑。</span><br></pre></td></tr></table></figure><p>半角的百分号，视同阿拉伯数字。</p><p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">反例：一部容量为 <span class="number">16</span> GB 的智能手机</span><br><span class="line"></span><br><span class="line">正例：一部容量为 <span class="number">16</span>GB 的智能手机</span><br></pre></td></tr></table></figure><p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：他的电脑是 MacBook Air 。</span><br><span class="line"></span><br><span class="line">正例：他的电脑是 MacBook Air。</span><br></pre></td></tr></table></figure><h3 id="22-句子"><a class="markdownIt-Anchor" href="#22-句子"></a> 2.2. 句子</h3><ul><li>避免使用长句。一个句子建议不超过 100 字或者正文的 3 行。</li><li>尽量使用简单句和并列句，避免使用复合句。</li></ul><h3 id="23-写作风格"><a class="markdownIt-Anchor" href="#23-写作风格"></a> 2.3. 写作风格</h3><p>尽量不使用被动语态，改为使用主动语态。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：假如此软件尚未被安装，</span><br><span class="line"></span><br><span class="line">正例：假如尚未安装这个软件，</span><br></pre></td></tr></table></figure><p>不使用非正式的语言风格。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！</span><br><span class="line"></span><br><span class="line">正例：无法参加本次活动，我深感遗憾。</span><br></pre></td></tr></table></figure><p>用对“的”、“地”、“得”。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">她露出了开心的笑容。</span><br><span class="line">（形容词＋的＋名词）</span><br><span class="line"></span><br><span class="line">她开心地笑了。</span><br><span class="line">（副词＋地＋动词）</span><br><span class="line"></span><br><span class="line">她笑得很开心。</span><br><span class="line">（动词＋得＋副词）</span><br></pre></td></tr></table></figure><p>使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：从管理系统可以监视中继系统和受其直接控制的分配系统。</span><br><span class="line"></span><br><span class="line">正例：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</span><br></pre></td></tr></table></figure><p>名词前不要使用过多的形容词。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。</span><br><span class="line"></span><br><span class="line">正例：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</span><br></pre></td></tr></table></figure><p>单个句子的长度尽量保持在 20 个字以内；20 ～ 29 个字的句子，可以接受；30 ～ 39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。</span><br><span class="line"></span><br><span class="line">正例：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</span><br></pre></td></tr></table></figure><p>同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：请确认没有接通装置的电源。</span><br><span class="line"></span><br><span class="line">正例：请确认装置的电源已关闭。</span><br></pre></td></tr></table></figure><p>避免使用双重否定句。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：没有删除权限的用户，不能删除此文件。</span><br><span class="line"></span><br><span class="line">正例：用户必须拥有删除权限，才能删除此文件。</span><br></pre></td></tr></table></figure><h3 id="24-英文处理"><a class="markdownIt-Anchor" href="#24-英文处理"></a> 2.4. 英文处理</h3><p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">英文：⋯information stored <span class="keyword">in</span> random <span class="keyword">access</span> memory (RAMs)⋯</span><br><span class="line"></span><br><span class="line">中文：……存储在随机存取存储器（RAM）里的信息……</span><br></pre></td></tr></table></figure><p>外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">U</span><span class="selector-class">.S</span><span class="selector-class">.A</span>.</span><br><span class="line"><span class="selector-tag">Apple</span>, <span class="selector-tag">Inc</span>.</span><br></pre></td></tr></table></figure><p>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">英文：<span class="number">5</span> minutes later⋯</span><br><span class="line"></span><br><span class="line">中文：<span class="number">5</span> 分钟过去了⋯⋯</span><br></pre></td></tr></table></figure><p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">英文：<span class="keyword">He</span> published <span class="keyword">an</span> article entitled <span class="string">"The Future of the Aviation"</span>.</span><br><span class="line"></span><br><span class="line">中文：他发表了一篇名为《航空业的未来》的文章。</span><br></pre></td></tr></table></figure><p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。</span><br></pre></td></tr></table></figure><p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">“American Association <span class="keyword">of</span> Physicists <span class="keyword">in</span> Medicine”（美国医学物理学家协会）是专有名词，需要大写。</span><br><span class="line"></span><br><span class="line">“online <span class="keyword">transaction</span> processing”（在线事务处理）不是专有名词，不应大写。</span><br></pre></td></tr></table></figure><h2 id="3-段落"><a class="markdownIt-Anchor" href="#3-段落"></a> 3. 段落</h2><h3 id="31-段落原则"><a class="markdownIt-Anchor" href="#31-段落原则"></a> 3.1. 段落原则</h3><ul><li>一个段落只能有一个主题，或一个中心句子。</li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li><li>段落之间使用一个空行隔开。</li><li>段落开头不要留出空白字符。</li></ul><h3 id="32-引用"><a class="markdownIt-Anchor" href="#32-引用"></a> 3.2. 引用</h3><p>引用第三方内容时，应注明出处。</p><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">One <span class="keyword">man</span>’s constant <span class="keyword">is</span> another <span class="keyword">man</span>’s variable. — Alan Perlis</span><br></pre></td></tr></table></figure><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本文转载自 WikiQuote</span><br></pre></td></tr></table></figure><p>使用外部图片时，必须在图片下方或文末标明来源。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本文部分图片来自 Wikipedia</span><br></pre></td></tr></table></figure><h3 id="33-强调"><a class="markdownIt-Anchor" href="#33-强调"></a> 3.3. 强调</h3><p>一些特殊的强调内容可以按照如下方式书写：</p><blockquote><p>🔔 『注意』</p></blockquote><blockquote><p>💡 『提示』</p></blockquote><blockquote><p>📚 『参考』</p></blockquote><h2 id="4-数值"><a class="markdownIt-Anchor" href="#4-数值"></a> 4. 数值</h2><h3 id="41-半角数字"><a class="markdownIt-Anchor" href="#41-半角数字"></a> 4.1. 半角数字</h3><p>数字一律使用半角形式，不得使用全角形式。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">反例： 这件商品的价格是１０００元。</span><br><span class="line"></span><br><span class="line">正例： 这件商品的价格是 <span class="number">1000</span> 元。</span><br></pre></td></tr></table></figure><h3 id="42-千分号"><a class="markdownIt-Anchor" href="#42-千分号"></a> 4.2. 千分号</h3><p>数值为千位以上，应添加千分号（半角逗号）。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">XXX 公司的实收资本为 RMB1,<span class="number">258</span>,<span class="number">000</span>。</span><br></pre></td></tr></table></figure><p>对于 4 ～ 6 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于 7 位及以上的数值，千分号是必须的。</p><p>多位小数要从小数点后从左向右添加千分号，比如<code>4.234,345</code>。</p><h3 id="43-货币"><a class="markdownIt-Anchor" href="#43-货币"></a> 4.3. 货币</h3><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$<span class="number">1</span>,<span class="number">000</span></span><br><span class="line"><span class="number">1</span>,<span class="number">000</span> 美元</span><br></pre></td></tr></table></figure><h3 id="44-数值范围"><a class="markdownIt-Anchor" href="#44-数值范围"></a> 4.4. 数值范围</h3><p>表示数值范围时，用<code>～</code>连接。参见《标点符号》一节的“连接号”部分。</p><p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">反例：<span class="number">132</span>～<span class="number">234</span>kg</span><br><span class="line">正例：<span class="number">132</span>kg～<span class="number">234</span>kg</span><br><span class="line"></span><br><span class="line">反例：<span class="number">67</span>～<span class="number">89</span>%</span><br><span class="line">正例：<span class="number">67</span>%～<span class="number">89</span>%</span><br></pre></td></tr></table></figure><h3 id="45-变化程度的表示法"><a class="markdownIt-Anchor" href="#45-变化程度的表示法"></a> 4.5. 变化程度的表示法</h3><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">增加到过去的两倍</span><br><span class="line">（过去为一，现在为二）</span><br><span class="line"></span><br><span class="line">增加了两倍</span><br><span class="line">（过去为一，现在为三）</span><br></pre></td></tr></table></figure><p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">降低到百分之八十</span><br><span class="line">（定额是一百，现在是八十）</span><br><span class="line"></span><br><span class="line">降低了百分之八十</span><br><span class="line">（原来是一百，现在是二十）</span><br></pre></td></tr></table></figure><p>不能用“降低 N 倍”或“减少 N 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><h2 id="5-符号"><a class="markdownIt-Anchor" href="#5-符号"></a> 5. 符号</h2><h3 id="51-符号原则"><a class="markdownIt-Anchor" href="#51-符号原则"></a> 5.1. 符号原则</h3><ul><li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。</li><li>如果整句为英文，则该句使用英文/半角标点。</li><li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</li></ul><h3 id="52-句号"><a class="markdownIt-Anchor" href="#52-句号"></a> 5.2. 句号</h3><p>中文语句中的结尾处应该用全角句号（<code>。</code>）。</p><p>句子末尾用括号加注时，句号应在括号之外。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">反例：关于文件的输出，请参照第 <span class="number">1.3</span> 节（见第 <span class="number">26</span> 页。）</span><br><span class="line"></span><br><span class="line">正例：关于文件的输出，请参照第 <span class="number">1.3</span> 节（见第 <span class="number">26</span> 页）。</span><br></pre></td></tr></table></figure><h3 id="53-逗号"><a class="markdownIt-Anchor" href="#53-逗号"></a> 5.3. 逗号</h3><p>逗号<code>，</code>表示句子内部的一般性停顿。</p><p>注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p><h3 id="54-顿号"><a class="markdownIt-Anchor" href="#54-顿号"></a> 5.4. 顿号</h3><p>句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。</span><br><span class="line"></span><br><span class="line">正例：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</span><br></pre></td></tr></table></figure><p>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook <span class="keyword">and </span>other components.</span><br></pre></td></tr></table></figure><h3 id="55-分号"><a class="markdownIt-Anchor" href="#55-分号"></a> 5.5. 分号</h3><p>分号<code>；</code>表示复句内部并列分句之间的停顿。</p><h3 id="56-引号"><a class="markdownIt-Anchor" href="#56-引号"></a> 5.6. 引号</h3><p>引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例句：许多人都认为客户服务的核心是“友好”和“专业”。</span><br></pre></td></tr></table></figure><p>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</span><br></pre></td></tr></table></figure><h3 id="57-圆括号"><a class="markdownIt-Anchor" href="#57-圆括号"></a> 5.7. 圆括号</h3><p>补充说明时，使用全角圆括号<code>（）</code>，括号前后不加空格。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例句：请确认所有的连接（电缆和接插件）均安装牢固。</span><br></pre></td></tr></table></figure><h3 id="58-冒号"><a class="markdownIt-Anchor" href="#58-冒号"></a> 5.8. 冒号</h3><p>全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。</span><br></pre></td></tr></table></figure><p>表示时间时，应使用半角冒号（<code>:</code>）。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">例句：早上 <span class="number">8</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><h3 id="59-省略号"><a class="markdownIt-Anchor" href="#59-省略号"></a> 5.9. 省略号</h3><p>省略号<code>……</code>表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p><p>省略号不应与“等”这个词一起使用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">反例：我们为会餐准备了香蕉、苹果、梨…等各色水果。</span><br><span class="line"></span><br><span class="line">正例：我们为会餐准备了各色水果，有香蕉、苹果、梨……</span><br><span class="line"></span><br><span class="line">正例：我们为会餐准备了香蕉、苹果、梨等各色水果。</span><br></pre></td></tr></table></figure><h3 id="510-感叹号"><a class="markdownIt-Anchor" href="#510-感叹号"></a> 5.10. 感叹号</h3><p>应该使用平静的语气叙述，尽量避免使用感叹号<code>！</code>。</p><p>不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p><h3 id="511-破折号"><a class="markdownIt-Anchor" href="#511-破折号"></a> 5.11. 破折号</h3><p>破折号<code>————</code>一般用于做进一步解释。破折号应占两个汉字的位置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。</span><br></pre></td></tr></table></figure><h3 id="512-连接号"><a class="markdownIt-Anchor" href="#512-连接号"></a> 5.12. 连接号</h3><p>连接号用于连接两个类似的词。</p><p>以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p><ul><li>两个名词的复合</li><li>图表编号</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">例句：氧化-还原反应</span><br><span class="line"></span><br><span class="line">例句：图 <span class="number">1</span><span class="number">-1</span></span><br></pre></td></tr></table></figure><p>以下场合应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</p><ul><li>数值范围（例如日期、时间或数字）</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">例句：<span class="number">2009</span> 年～<span class="number">2011</span> 年</span><br></pre></td></tr></table></figure><p>注意，波浪连接号前后两个值都应该加上单位。</p><p>波浪连接号也可以用汉字“至”代替。</p><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">例句：周围温度：<span class="number">-20</span>°C 至 <span class="number">-10</span>°C</span><br></pre></td></tr></table></figure><h2 id="6-结构"><a class="markdownIt-Anchor" href="#6-结构"></a> 6. 结构</h2><h3 id="61-目录结构"><a class="markdownIt-Anchor" href="#61-目录结构"></a> 6.1. 目录结构</h3><p>技术手册目录结构是一部完整的书，建议采用下面的结构。</p><ul><li><strong>简介</strong>（Introduction） - [必选][目录|文件] 提供对产品和文档本身的总体的、扼要的说明</li><li><strong>入门篇</strong>（Quickstart） - [可选][文件] 如何最快速地使用产品</li><li><strong>基础篇</strong>（Basics） - [必选][目录] 又称”使用篇“，提供初级的使用教程<ul><li><strong>环境准备</strong>（Prerequisite） - [可选][文件] 软件使用需要满足的前置条件</li><li><strong>安装</strong>（Installation） - [可选][文件] 软件的安装方法</li><li><strong>配置</strong>（Configuration） - [可选][目录|文件] 软件的配置</li><li><strong>特性</strong>（Feature） - [必选][目录|文件] 软件的功能特性</li></ul></li><li><strong>进阶篇</strong>（Advanced） - [可选][目录] 又称”开发篇“，提供中高级的开发教程<ul><li><strong>原理</strong>（Principle） - [可选][目录|文件] 软件的原理</li><li><strong>设计</strong>（Design） - [可选][目录|文件] 软件的设计，如：架构、设计思想等</li></ul></li><li><strong>实战篇</strong>（Action） - [可选][目录] 提供一些具有实战意义的示例说明</li><li><strong>API</strong>（API） - [可选][目录|文件] 软件 API 的逐一介绍</li><li><strong>常见问题</strong>（FAQ） - [可选][目录|文件] 常见问题解答</li><li><strong>附录</strong>（Appendix） - [可选][目录] 不属于教程本身、但对阅读教程有帮助的内容<ul><li><strong>命令</strong>（Command） - [可选][目录] 命令</li><li><strong>资源</strong>（Resource） - [必选][文件] 资源</li><li><strong>术语</strong>（Glossary） - [可选][文件] 名词解释</li><li><strong>技巧</strong>（Recipe） - [可选][文件] 最佳实践</li><li><strong>版本</strong>（Changelog） - [可选][文件] 版本说明</li><li><strong>反馈</strong>（Feedback） - [可选][文件] 反馈方式</li></ul></li></ul><p>下面是两个真实范例，可参考。</p><ul><li><a href="http://redux.js.org/index.html" target="_blank" rel="noopener">Redux 手册</a></li><li><a href="http://flight-manual.atom.io/" target="_blank" rel="noopener">Atom 手册</a></li></ul><h3 id="62-文件名"><a class="markdownIt-Anchor" href="#62-文件名"></a> 6.2. 文件名</h3><p>文档的文件名不得含有空格。</p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">反例： 名词解释<span class="selector-class">.md</span></span><br><span class="line"></span><br><span class="line">正例： <span class="selector-tag">glossary</span><span class="selector-class">.md</span></span><br></pre></td></tr></table></figure><p>文件名建议只使用小写字母，不使用大写字母。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">反例：<span class="selector-tag">TroubleShooting</span><span class="selector-class">.md</span></span><br><span class="line"></span><br><span class="line">正例：<span class="selector-tag">troubleshooting</span><span class="selector-class">.md</span></span><br></pre></td></tr></table></figure><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p><p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">反例：<span class="selector-tag">advanced_usage</span><span class="selector-class">.md</span></span><br><span class="line"></span><br><span class="line">正例：<span class="selector-tag">advanced-usage</span><span class="selector-class">.md</span></span><br></pre></td></tr></table></figure><h2 id="7-emoji"><a class="markdownIt-Anchor" href="#7-emoji"></a> 7. Emoji</h2><p>在 markdown 文档中，普遍会使用 emoji，帮助理解内容。但是，如果滥用 emoji，可能会适得其反。</p><p>这里，将一些比较约定俗成的 emoji 表情使用场景列举一下：</p><ul><li>💡 提示 - [推荐]</li><li>🔔 注意、警告 - [推荐]</li><li>⭕ 正确 - [推荐]</li><li>❌ 错误 - [推荐]</li><li>❓ 问题 - [推荐]</li><li>⛔ 禁止 - [推荐]</li><li>🚧 未完待续、有待补充 - [推荐]</li><li>📚 参考、参考资料 - [可选]</li><li>⌨ 源码 - [可选]</li></ul><h2 id="8-参考"><a class="markdownIt-Anchor" href="#8-参考"></a> 8. 参考</h2><ul><li><a href="http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html" target="_blank" rel="noopener">产品手册中文写作规范</a>, by 华为</li><li><a href="http://docs.daocloud.io/write-docs/format" target="_blank" rel="noopener">写作规范和格式规范</a>, by DaoCloud</li><li><a href="http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf" target="_blank" rel="noopener">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li><li><a href="https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf" target="_blank" rel="noopener">简体中文规范指南</a>, by lengoo</li><li><a href="https://open.leancloud.cn/copywriting-style-guide.html" target="_blank" rel="noopener">文档风格指南</a>, by LeanCloud</li><li><a href="https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit" target="_blank" rel="noopener">豌豆荚文案风格指南</a>, by 豌豆荚</li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener">中文文案排版指北</a>, by sparanoid</li><li><a href="http://w3c.github.io/clreq/" target="_blank" rel="noopener">中文排版需求</a>, by W3C</li><li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html" target="_blank" rel="noopener">为什么文件名要小写？</a>, by 阮一峰</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;技术文档规范&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#技术文档规范&quot;&gt;&lt;/a&gt; 技术文档规范&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;文档采用 Markdown 语法书写。&lt;/p&gt;
&lt;p&gt;📚 「参考」Markdown 语法可以
      
    
    </summary>
    
    
      <category term="method" scheme="https://dunwu.github.io/blog/categories/method/"/>
    
    
      <category term="method" scheme="https://dunwu.github.io/blog/tags/method/"/>
    
      <category term="doc" scheme="https://dunwu.github.io/blog/tags/doc/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络之应用层</title>
    <link href="https://dunwu.github.io/blog/communication/network-application/"/>
    <id>https://dunwu.github.io/blog/communication/network-application/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-08-21T05:20:31.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络之应用层"><a class="markdownIt-Anchor" href="#计算机网络之应用层"></a> 计算机网络之应用层</h1><!-- TOC depthFrom:2 depthTo:3 --><ul><li><a href="#http">HTTP</a></li><li><a href="#dns">DNS</a></li><li><a href="#ftp">FTP</a></li><li><a href="#dhcp">DHCP</a></li><li><a href="#telnet">TELNET</a></li><li><a href="#%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%8D%8F%E8%AE%AE">电子邮件协议</a><ul><li><a href="#1-smtp">1. SMTP</a></li><li><a href="#2-pop3">2. POP3</a></li><li><a href="#3-imap">3. IMAP</a></li></ul></li><li><a href="#%E5%B8%B8%E7%94%A8%E7%AB%AF%E5%8F%A3">常用端口</a></li><li><a href="#web-%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B">Web 页面请求过程</a><ul><li><a href="#1-dhcp-%E9%85%8D%E7%BD%AE%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF">1. DHCP 配置主机信息</a></li><li><a href="#2-arp-%E8%A7%A3%E6%9E%90-mac-%E5%9C%B0%E5%9D%80">2. ARP 解析 MAC 地址</a></li><li><a href="#3-dns-%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D">3. DNS 解析域名</a></li><li><a href="#4-http-%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2">4. HTTP 请求页面</a></li></ul></li></ul><!-- /TOC --><h2 id="http"><a class="markdownIt-Anchor" href="#http"></a> HTTP</h2><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/application/1551096916007.png"/></div><p>超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP 是万维网的数据通信的基础。</p><p>设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。通过 HTTP 或者 HTTPS 协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</p><p>安全套接字层超文本传输协议 HTTPS 为了数据传输的安全，HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</p><blockquote><p>👉 扩展阅读：<a href="HTTP.md">HTTP</a></p></blockquote><h2 id="dns"><a class="markdownIt-Anchor" href="#dns"></a> DNS</h2><p>域名服务器 DNS 是一个分布式数据库，提供了主机名和 IP 地址之间相互转换的服务。这里的分布式数据库是指，每个站点只保留它自己的那部分数据。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/application/1551094759786.png"/></div><p>域名具有层次结构，从上到下依次为：根域名、顶级域名、二级域名。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/application/1551094954067.png"/></div><p>DNS 可以使用 UDP 或者 TCP 进行传输，使用的端口号都为 53。大多数情况下 DNS 使用 UDP 进行传输，这就要求域名解析器和域名服务器都必须自己处理超时和重传来保证可靠性。在两种情况下会使用 TCP 进行传输：</p><ul><li>如果返回的响应超过的 512 字节（UDP 最大只支持 512 字节的数据）。</li><li>区域传送（区域传送是主域名服务器向辅助域名服务器传送变化的那部分数据）。</li></ul><blockquote><p>👉 扩展阅读：<a href="DNS.md">DNS</a></p></blockquote><h2 id="ftp"><a class="markdownIt-Anchor" href="#ftp"></a> FTP</h2><p>文件传送协议 FTP 使用 TCP 进行连接，它需要两个连接来传送一个文件：</p><ul><li>控制连接：服务器打开端口号 21 等待客户端的连接，客户端主动建立连接后，使用这个连接将客户端的命令传送给服务器，并传回服务器的应答。</li><li>数据连接：用来传送一个文件数据。</li></ul><p>根据数据连接是否是服务器端主动建立，FTP 有主动和被动两种模式：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/application/1551095440002.png"/></div><ul><li>主动模式：服务器端主动建立数据连接，其中服务器端的端口号为 20，客户端的端口号随机，但是必须大于 1024，因为 0~1023 是熟知端口号。</li><li>被动模式：客户端主动建立数据连接，其中客户端的端口号由客户端自己指定，服务器端的端口号随机。</li></ul><p>主动模式要求客户端开放端口号给服务器端，需要去配置客户端的防火墙。被动模式只需要服务器端开放端口号即可，无需客户端配置防火墙。但是被动模式会导致服务器端的安全性减弱，因为开放了过多的端口号。</p><p>FTPS 是一种对常用的文件传输协议（FTP）添加传输层安全（TLS）和安全套接层（SSL）加密协议支持的扩展协议。</p><h2 id="dhcp"><a class="markdownIt-Anchor" href="#dhcp"></a> DHCP</h2><p>动态主机配置协议 DHCP (Dynamic Host Configuration Protocol) 提供了即插即用的连网方式，用户不再需要去手动配置 IP 地址等信息。</p><p>DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、网关 IP 地址。</p><p>DHCP 工作过程如下：</p><ol><li>客户端发送 Discover 报文，该报文的目的地址为 255.255.255.255:67，源地址为 0.0.0.0:68，被放入 UDP 中，该报文被广播到同一个子网的所有主机上。如果客户端和 DHCP 服务器不在同一个子网，就需要使用中继代理。</li><li>DHCP 服务器收到 Discover 报文之后，发送 Offer 报文给客户端，该报文包含了客户端所需要的信息。因为客户端可能收到多个 DHCP 服务器提供的信息，因此客户端需要进行选择。</li><li>如果客户端选择了某个 DHCP 服务器提供的信息，那么就发送 Request 报文给该 DHCP 服务器。</li><li>DHCP 服务器发送 Ack 报文，表示客户端此时可以使用提供给它的信息。</li></ol><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/application/1551095610521.png"/></div><h2 id="telnet"><a class="markdownIt-Anchor" href="#telnet"></a> TELNET</h2><p>远程登录协议 TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。</p><p>TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。</p><h2 id="电子邮件协议"><a class="markdownIt-Anchor" href="#电子邮件协议"></a> 电子邮件协议</h2><p>一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件协议。</p><p>邮件协议包含发送协议和读取协议，发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。</p><h3 id="1-smtp"><a class="markdownIt-Anchor" href="#1-smtp"></a> 1. SMTP</h3><p>SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主体的结构，定义了非 ASCII 码的编码规则。</p><h3 id="2-pop3"><a class="markdownIt-Anchor" href="#2-pop3"></a> 2. POP3</h3><p>POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。</p><h3 id="3-imap"><a class="markdownIt-Anchor" href="#3-imap"></a> 3. IMAP</h3><p>IMAP 协议中客户端和服务器上的邮件保持同步，如果不手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。</p><h2 id="常用端口"><a class="markdownIt-Anchor" href="#常用端口"></a> 常用端口</h2><table><thead><tr><th style="text-align:center">应用</th><th style="text-align:center">应用层协议</th><th style="text-align:center">端口号</th><th style="text-align:center">传输层协议</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">域名解析</td><td style="text-align:center">DNS</td><td style="text-align:center">53</td><td style="text-align:center">UDP/TCP</td><td style="text-align:center">长度超过 512 字节时使用 TCP</td></tr><tr><td style="text-align:center">动态主机配置协议</td><td style="text-align:center">DHCP</td><td style="text-align:center">67/68</td><td style="text-align:center">UDP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">简单网络管理协议</td><td style="text-align:center">SNMP</td><td style="text-align:center">161/162</td><td style="text-align:center">UDP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">文件传送协议</td><td style="text-align:center">FTP</td><td style="text-align:center">20/21</td><td style="text-align:center">TCP</td><td style="text-align:center">控制连接 21，数据连接 20</td></tr><tr><td style="text-align:center">远程终端协议</td><td style="text-align:center">TELNET</td><td style="text-align:center">23</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">超文本传送协议</td><td style="text-align:center">HTTP</td><td style="text-align:center">80</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">简单邮件传送协议</td><td style="text-align:center">SMTP</td><td style="text-align:center">25</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">邮件读取协议</td><td style="text-align:center">POP3</td><td style="text-align:center">110</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">网际报文存取协议</td><td style="text-align:center">IMAP</td><td style="text-align:center">143</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr></tbody></table><h2 id="web-页面请求过程"><a class="markdownIt-Anchor" href="#web-页面请求过程"></a> Web 页面请求过程</h2><h3 id="1-dhcp-配置主机信息"><a class="markdownIt-Anchor" href="#1-dhcp-配置主机信息"></a> 1. DHCP 配置主机信息</h3><ul><li>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</li><li>主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。</li><li>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。</li><li>该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</li><li>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</li><li>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。</li><li>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。</li></ul><h3 id="2-arp-解析-mac-地址"><a class="markdownIt-Anchor" href="#2-arp-解析-mac-地址"></a> 2. ARP 解析 MAC 地址</h3><ul><li>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</li><li>主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</li><li>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。</li><li>该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。</li><li>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</li><li>主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</li><li>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。</li></ul><h3 id="3-dns-解析域名"><a class="markdownIt-Anchor" href="#3-dns-解析域名"></a> 3. DNS 解析域名</h3><ul><li>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</li><li>网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。</li><li>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</li><li>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</li><li>找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</li></ul><h3 id="4-http-请求页面"><a class="markdownIt-Anchor" href="#4-http-请求页面"></a> 4. HTTP 请求页面</h3><ul><li>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</li><li>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</li><li>HTTP 服务器收到该报文段之后，生成 TCP SYN ACK 报文段，发回给主机。</li><li>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</li><li>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</li><li>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机网络之应用层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络之应用层&quot;&gt;&lt;/a&gt; 计算机网络之应用层&lt;/h1&gt;
&lt;!-- TOC depthFrom:2 depthTo:3 --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="communication" scheme="https://dunwu.github.io/blog/categories/communication/"/>
    
    
      <category term="communication" scheme="https://dunwu.github.io/blog/tags/communication/"/>
    
      <category term="network" scheme="https://dunwu.github.io/blog/tags/network/"/>
    
      <category term="application" scheme="https://dunwu.github.io/blog/tags/application/"/>
    
  </entry>
  
  <entry>
    <title>UML 教程</title>
    <link href="https://dunwu.github.io/blog/design/UML/"/>
    <id>https://dunwu.github.io/blog/design/UML/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-08-21T05:20:27.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uml-教程"><a class="markdownIt-Anchor" href="#uml-教程"></a> UML 教程</h1><blockquote><p>关键词：<code>部署图</code>, <code>组件图</code>, <code>包图</code>, <code>类图</code>, <code>复合结构图</code>, <code>对象图</code>, <code>活动图</code>, <code>状态机图</code>, <code>用例图</code>, <code>通信图</code>, <code>交互概述图</code>, <code>时序图</code>, <code>时间图</code></p></blockquote><!-- TOC depthFrom:2 depthTo:2 --><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E9%83%A8%E7%BD%B2%E5%9B%BE">部署图</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E5%9B%BE">组件图</a></li><li><a href="#%E5%8C%85%E5%9B%BE">包图</a></li><li><a href="#%E7%B1%BB%E5%9B%BE">类图</a></li><li><a href="#%E5%A4%8D%E5%90%88%E7%BB%93%E6%9E%84%E5%9B%BE">复合结构图</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E5%9B%BE">对象图</a></li><li><a href="#%E6%B4%BB%E5%8A%A8%E5%9B%BE">活动图</a></li><li><a href="#%E7%8A%B6%E6%80%81%E6%9C%BA%E5%9B%BE">状态机图</a></li><li><a href="#%E7%94%A8%E4%BE%8B%E5%9B%BE">用例图</a></li><li><a href="#%E9%80%9A%E4%BF%A1%E5%9B%BE">通信图</a></li><li><a href="#%E4%BA%A4%E4%BA%92%E6%A6%82%E8%BF%B0%E5%9B%BE">交互概述图</a></li><li><a href="#%E6%97%B6%E5%BA%8F%E5%9B%BE">时序图</a></li><li><a href="#%E6%97%B6%E9%97%B4%E5%9B%BE">时间图</a></li><li><a href="#uml-%E5%B7%A5%E5%85%B7">UML 工具</a></li><li><a href="#%E6%9B%B4%E5%A4%9A%E5%86%85%E5%AE%B9">更多内容</a></li></ul><!-- /TOC --><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><h3 id="uml-图类型"><a class="markdownIt-Anchor" href="#uml-图类型"></a> UML 图类型</h3><p>UML 图类型如下图所示：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-diagrams.png"/></div><h4 id="结构式建模图"><a class="markdownIt-Anchor" href="#结构式建模图"></a> <a href="UML%E7%BB%93%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9B%BE.md">结构式建模图</a></h4><blockquote><p>结构式建模图（Structure diagrams）强调的是系统式的建模。结构图定义了一个模型的静态架构。它们通常被用来对那些构成模型的‘要素’建模，诸如：类，对象，接口和物理组件。另外，它们也被用来对元素间关联和依赖关系进行建模。</p></blockquote><ul><li><a href="#%E7%B1%BB%E5%9B%BE">类图</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E5%9B%BE">对象图</a></li><li><a href="#%E5%8C%85%E5%9B%BE">包图</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E5%9B%BE">组件图</a></li><li><a href="#%E9%83%A8%E7%BD%B2%E5%9B%BE">部署图</a></li><li><a href="#%E5%A4%8D%E5%90%88%E7%BB%93%E6%9E%84%E5%9B%BE">复合结构图</a></li></ul><h4 id="行为式建模图"><a class="markdownIt-Anchor" href="#行为式建模图"></a> <a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md">行为式建模图</a></h4><blockquote><p>行为式建模图（Behavior diagrams）强调系统模型中触发的事。行为图用来记录在一个模型内部，随时间的变化，模型执行的交互变化和瞬间的状态；并跟踪系统在真实环境下如何表现，以及观察系统对一个操作或事件的反应，以及它的结果。</p></blockquote><ul><li><a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md#%E6%B4%BB%E5%8A%A8%E5%9B%BE">活动图</a></li><li><a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md#%E7%8A%B6%E6%80%81%E5%9B%BE">状态图</a></li><li><a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md#%E7%94%A8%E4%BE%8B%E5%9B%BE">用例图</a></li><li><a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md#%E9%80%9A%E4%BF%A1%E5%9B%BE">通信图</a></li><li><a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md#%E4%BA%A4%E4%BA%92%E6%A6%82%E8%BF%B0%E5%9B%BE">交互概述图</a></li><li><a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md#%E6%97%B6%E5%BA%8F%E5%9B%BE">时序图</a></li><li><a href="UML%E8%A1%8C%E4%B8%BA%E5%BB%BA%E6%A8%A1%E5%9B%BE.md#%E6%97%B6%E9%97%B4%E5%9B%BE">时间图</a></li></ul><h3 id="uml-概念"><a class="markdownIt-Anchor" href="#uml-概念"></a> UML 概念</h3><p>UML 从来源中使用相当多的概念。我们将之定义于统一建模语言术语汇表。下面仅列代表性的概念。</p><ul><li>对于结构而言 - 执行者，属性，类，元件，接口，对象，包。</li><li>对于行为而言 - 活动（UML），事件（UML），消息（UML），方法（UML），操作（UML），状态（UML），用例（UML）。</li><li>对于关系而言 - 聚合，关联，组合，相依，广义化（or 继承）。</li><li>其他概念<ul><li>构造型—这规范符号应用到的模型</li><li>多重性—多重性标记法与资料库建模基数对应，例如：<code>1, 0..1, 1..*</code></li></ul></li></ul><h2 id="部署图"><a class="markdownIt-Anchor" href="#部署图"></a> 部署图</h2><blockquote><p><strong>部署图（Deployment Diagram）用于对系统的物理结构建模</strong>。部署图将显示系统中的软件组件和硬件组件之间的关系以及处理工作的物理分布。</p></blockquote><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-deployment-diagram-example.png"/></div><h3 id="节点"><a class="markdownIt-Anchor" href="#节点"></a> 节点</h3><p>节点既可以是硬件元素，也可以是软件元素。它显示为一个立方体，如下图所示。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-node.gif"/></div><h3 id="节点实例"><a class="markdownIt-Anchor" href="#节点实例"></a> 节点实例</h3><p>图可以显示节点实例，实例与节点的区分是：实例的名称带下划线，冒号放在它的基本节点类型之前。实例在冒号之前可以有名称，也可以没有名称。下图显示了一个具名的计算机实例。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-node-instance.gif"/></div><h3 id="节点构造型"><a class="markdownIt-Anchor" href="#节点构造型"></a> 节点构造型</h3><p>为节点提供了许多标准的构造型，分别命名为 «cdrom»， «cd-rom»， «computer»， «disk array»， «pc»， «pc client»， «pc server»， «secure»， «server»， «storage»， «unix server»， «user pc»。 并在节点符号的右上角显示适当的图标。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-node-stereotype.gif"/></div><h3 id="工件"><a class="markdownIt-Anchor" href="#工件"></a> 工件</h3><p>工件是<a href="http://www.sparxsystems.cn/platforms/software_development.html" target="_blank" rel="noopener">软件开发</a>过程中的产品。包括过程模型（如：用例模型，设计模型等），源文件，执行文件，设计文档，测试报告，构造型，用户手册等等。</p><p>工件表示为带有工件名称的矩形，并显示«artifact»关键字和文档符号。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-artifact.gif"/></div><h3 id="关联"><a class="markdownIt-Anchor" href="#关联"></a> 关联</h3><p>在部署图的上下文联系中，关联代表节点间的联系通道。下图显示了一个网络系统的部署图，描述了网络协议为构造型和关联终端的多重性，</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-network-model.gif"/></div><h3 id="作为容器的节点"><a class="markdownIt-Anchor" href="#作为容器的节点"></a> 作为容器的节点</h3><p>节点可以包含其他元素，如组件和工件。下图显示了一个嵌入式系统某个部分的部署图。描写了一个被主板节点包含的可执行工件。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-embedded-model.gif"/></div><h2 id="组件图"><a class="markdownIt-Anchor" href="#组件图"></a> 组件图</h2><blockquote><p><strong>组件图（Component Diagram）描绘了组成一个软件系统的模块和嵌入控件</strong>。组件图比类图具有更高层次的抽象－通常运行时一个组件被一个或多个类（或对象）实现。它们象积木那样使得组件能最终构成系统的绝大部分。</p></blockquote><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-component-diagram.gif"/></div><p>上图演示了一些组件和它们的内部关系。装配连接器（Assembly connectors）“连接”由&quot;Product&quot;和&quot;Customer&quot;的提供接口到由 &quot;Order&quot;指定的需求接口。 一个依赖关系映射了客户相关的帐户信息到“Order”需要的 &quot;Payment&quot;需求接口。</p><p>实际上，组件图同包图很相似，它们都有明确的界限，把元素分组到逻辑结构中。他们之间的不同是：组件图提供了语义更丰富的分组机制，在组件图中，所有的模型元素都是私有的，而包图只显示公有的成员。</p><h3 id="表现组件"><a class="markdownIt-Anchor" href="#表现组件"></a> 表现组件</h3><p>组件可表示为带关键字 «component»的矩形类元；也可用右上角有组件图标的矩形表示。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-representing-components.gif"/></div><h3 id="装配连接器"><a class="markdownIt-Anchor" href="#装配连接器"></a> 装配连接器</h3><p>装配连接器在组件 “Component1”的需求接口和另一个组件 “Component2”的提供接口之间建立桥梁; 这个桥梁使得一个组件能提供另一个组件所需要的服务。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-required-interfaces.gif"/></div><h3 id="带端口组件"><a class="markdownIt-Anchor" href="#带端口组件"></a> 带端口组件</h3><p>使用端口的组件图允许在它的环境指定一个服务和行为，同时这个服务和行为也是组件需要的。当端口进行双向操作的时候，它可以指定输入和输出。下图详述了用于在线服务的带端口组件，它有两个提供接口 “order entry”和 “tracking”，也有 “payment” 需求接口。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-component-with-ports.gif"/></div><h2 id="包图"><a class="markdownIt-Anchor" href="#包图"></a> 包图</h2><blockquote><p><strong>包图（Package Diagram）用来表现包和它所包含元素的组织</strong>。当用来代表类元素时，包图提供了命名空间的可视化。包图最常用的用途是用来组织用例图和类图，尽管它不局限于这些 UML 元素。</p></blockquote><p>下面是一个包图的例子。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-package-diagram.gif"/></div><p>包中的元素共享相同的命名空间，因此，一个指定命名空间的元素必须有唯一的名称。</p><p>包可以用来代表物理或逻辑关系。选择把类包括在指定的包里，有助于在同一个包里赋予这些类相同继承层次。通常认为把通过复合相关联的类，以及与它们相协作的类放在同一个包里。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-package.gif"/></div><p>在 UML2.5 中，包用文件夹来表示，包中的元素共享同一个命名空间，并且必须是可识别的，因此要有唯一的名称或类型。包必须显示包名，在附属方框部分有选择的显示包内的元素。</p><ul><li><strong>包的合并</strong> - 包之间的合并连接符«merge»定义了源包元素与目标包同名元素之间的泛化关系。源包元素的定义被扩展来包含目标包元素定义。当源包元素与目标包内没有同名元素时，目标包元素的定义不受影响。</li><li><strong>包的导入</strong> - 导入连接符 «import»表明目标包的元素，在该例中是一个类 ，在源包中被引用要用非限定修饰名。源包的命名空间获得目标类的接口，目标包的命名空间则不受影响。</li><li><strong>嵌套连接符</strong> - 源包和目标包间的嵌套连接符说明目标包完全包含源包。</li></ul><h2 id="类图"><a class="markdownIt-Anchor" href="#类图"></a> 类图</h2><blockquote><p><strong>类图（Class Diagram）展示了面向对象系统的构造模块</strong>。描绘了模型或部分模型的静态视图，显示它包含的属性和行为，而不是详细描述操作的功能或完善方法。类图最常用来表达多个类和接口之间的关系。泛化（Generalizations），聚合（aggregations）和关联（associations）分别是类之间继承，复合或应用，及连接的表现。</p></blockquote><p>下面的图显示了类之间的聚合关系。弱聚合（浅色箭头）表现在类 “Account” 使用 “AddressBook”，但是不必要包含它的一个实例。强聚合（图中的黑色箭头）表示了目标类包含源类，例如，“Contact” 和 &quot;ContactGroup&quot;值被包含在 &quot;AddressBook&quot;中。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-class-diagram.png"/></div><h3 id="类classes"><a class="markdownIt-Anchor" href="#类classes"></a> 类（Classes）</h3><p>类是定义对象所具有的属性和行为的元素。行为用类能理解的合适消息和适合每条消息的操作来描述。 类中也可能定义约束，标记值，构造型。</p><h3 id="类的标柱class-notation"><a class="markdownIt-Anchor" href="#类的标柱class-notation"></a> 类的标柱（Class Notation）</h3><p>类用矩形表示。除类的名称外，还可以选择性地显示属性和操作。 分栏分别用来显示类的名称，属性和操作。</p><p>在下面图中，类的类名显示在最上面的分栏，它下面的分栏显示详细属性，如：“center” 属性显示初始化的值。最后面的分栏显示操作，如： setWidth，setLength 和 setPosition 以及他们的参数。 属性和操作名前的标注表示了该属性或操作的可见性: 如果使用 &quot;+&quot;号，这个属性或操作是公共的 ; “-” 号则代表这个属性或操作是私有的。 “#“号是这个属性或操作被定义为保护的，” ~” 号代表包的可见性。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-class.gif"/></div><h3 id="接口interfaces"><a class="markdownIt-Anchor" href="#接口interfaces"></a> 接口（Interfaces）</h3><p>接口是实施者同意满足的行为规范，是一种约定。实现一个接口，类必需支持其要求的行为，使系统按照同样的方式，即公共的接口，处理不相关的元素。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-class-interface.gif"/></div><p>接口有相似于类的外形风格，含有指定的操作，如下图所示。如果没有明确的详细操作，也可以画成一个圆环。当画成圆环的时候，到这个环形标柱的实现连接没有目标箭头。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-interface.gif"/></div><h3 id="表tables"><a class="markdownIt-Anchor" href="#表tables"></a> 表（Tables）</h3><p>表尽管不是基本 UML 的一部分，仍然是“图型”能完成的实例用。在右上角画一个表的小图标来表示。表属性用“图型” «column»表示。 绝大多数表单有一个主键，是由一个或几个字段组成的一个唯一的字码组合加主键操作来访问表格，主键操作“图型”为«PK»。 一些表有一个或多个外键，使用一个或多个字段加一个外键操作，映射到相关表的主键上去，外键操作“图型”为«FK»。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-table.gif"/></div><h3 id="关联associations"><a class="markdownIt-Anchor" href="#关联associations"></a> 关联（Associations）</h3><p>关联表明两个模型元素之间有关系，通常用在一个类中被实现为一个实例变量。连接符可以包含两端的命名的角色，基数性，方向和约束。关联是元素之间普通的关系。如果多于两个元素，也可以使用菱形的关联关系。当从类图生成代码时，关联末端的对象将变成目标类中实例变量。见下图示例 “playsFor” 将变成&quot;Player&quot;类中的实例变量。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-associations.gif"/></div><h3 id="泛化generalizations"><a class="markdownIt-Anchor" href="#泛化generalizations"></a> 泛化（Generalizations）</h3><p>泛化被用来说明继承关系。连接从特定类元到一般类元。泛化的含义是源类继承了目标类的特性。下图的图显示了一个父类泛化一个子类， 类“Circle”的一个实例将会有属性 “ x_position”，“ y_position” ， “radius” 和 方法 “display()”。 注意：类 “Shape” 是抽象的，类名显示为斜体。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-generalizations.gif"/></div><p>下图显示了与上图相同信息的视图。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-generalizations-02.gif"/></div><h3 id="聚合aggregations"><a class="markdownIt-Anchor" href="#聚合aggregations"></a> 聚合（Aggregations）</h3><p>聚合通常被用来描述由更小的组件所构成的元素。聚合关系表示为白色菱形箭头指向目标类或父类。</p><p>聚合的更强形式 -组合聚合（强聚合） - 显示为黑色菱形箭头，用来组合每次最大化的包含组件。如果一个组合聚合的父类被删除，通常与他相关的所有部分都会被删除，但是，如果一个部件从组合中去掉，将不用删除整个组合。组合是可迁，非对称的关系和递归的。</p><p>下面的图示：显示了弱聚合和强聚合的不同。“ address book” 由许多 “contacts” 和 “contact groups”组成。 “contact group” 是一个“contacts”的虚分组; “contact”可以被包含在不止一个 “ contact group”。 如果你删除一个“ address book”，所有的 “contacts” 和 “contact groups” 也将会被删除；如果你删除“ contact group”， 没有 “contacts”会被删除。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-aggregations.gif"/></div><h3 id="关联类association-classes"><a class="markdownIt-Anchor" href="#关联类association-classes"></a> 关联类（Association Classes）</h3><p>关联类是一个允许关联连接有属性和操作的构造。下面的示例：显示了远不止简单连接两个类的连接，如给“employee”分配项目。“ employee”在项目中所起的作用是一个复杂的实体，既有自身的也有不属于“employee” 或 “project” 类的细节。 例如，“ employee”可以同时为几个项目工作，有不同的职务头衔和对应的安全权限。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-association-classes.gif"/></div><h3 id="依赖dependencies"><a class="markdownIt-Anchor" href="#依赖dependencies"></a> 依赖（Dependencies）</h3><p>依赖被用来描述模型元素间广泛的依赖关系。通常在设计过程早期显示两个元素之间存在某种关系，因为是初期而不能确定具体是什么关系，在设计过程末期，该继承关系会被归入已有构造型 (构造型 可以是实例化 «instantiate»，跟踪 «trace»，导入 «import»， 和其它的关系)，或被替换成一个更明确类型的连接符。</p><h3 id="跟踪traces"><a class="markdownIt-Anchor" href="#跟踪traces"></a> 跟踪（Traces）</h3><p>跟踪关系是一种特殊化的依赖关系。连接模型元素或跨模型但是具有相同概念的模型元素集。跟踪被经常用来追踪需求和模型的变化。由于变化是双向的，这种依赖关系的顺序通常被忽略。这种关系的属性可以被指定为单向映射，但跟踪是双向的，非正式的和很少可计算的。</p><h3 id="实现realizations"><a class="markdownIt-Anchor" href="#实现realizations"></a> 实现（Realizations）</h3><p>是源对象执行或实现目标，实现被用来表达模型的可跟踪性和完整性－业务模型或需求被一个或多个用例实现，用例则被类实现，类被组件实现，等等。这种实现贯穿于系统设计的映射需求和类等，直至抽象建模水平级。从而确保整个系统的一张宏图，它也反映系统的所有微小组成，以及约束和定义它的细节。实现关系用带虚线的实箭头表示。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-realizations.gif"/></div><h3 id="嵌套nestings"><a class="markdownIt-Anchor" href="#嵌套nestings"></a> 嵌套（Nestings）</h3><p>嵌套连接符用来表示源元素嵌套在目标元素中。下图显示“ inner class”的定义，尽管在 EA 中，更多地按照着他们在项目层次视图中的位置来显示这种关系。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-nestings.gif"/></div><h2 id="复合结构图"><a class="markdownIt-Anchor" href="#复合结构图"></a> 复合结构图</h2><blockquote><p><strong>复合结构图显示类的内部结构，包括它与系统其他部分的交互点。也显示各部分的配置与关系，这些部分一起执行类元的行为。</strong></p></blockquote><p>类元素已经在类图部分被详细地阐述，这部分用来说明类表现复合元素的方式，如：暴露接口，包含端口和部件。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-composite-structure-diagram.gif"/></div><h3 id="部件"><a class="markdownIt-Anchor" href="#部件"></a> 部件</h3><p>部件是代表一组（一个或多个）实例的元素，这组实例的拥有者是一类元实例，例如：如果一个图的实例有一组图形元素，则这些图形元素可以被表示为部件，并可以对他们之间的某种关系建模。注意：一个部件可以在它的父类被删除之前从父类中被去掉，这样部件就不会被同时删除了。<br />部件在类或组件内部显示为不加修饰的方框。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-part.gif"/></div><h3 id="端口"><a class="markdownIt-Anchor" href="#端口"></a> 端口</h3><p>端口是类型化的元素，代表一个包含类元实例的外部可视的部分。端口定义了类元和它的环境之间的交互。端口显示在包含它的部件，类或组合结构的边缘上。端口指定了类元提供的服务，以及类元要求环境提供的服务。<br />端口显示为所属类元边界指定的方框。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-port.gif"/></div><h3 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h3><p>接口与类相似，但是有一些限制，所有的接口操作都是公共和抽象的，不提供任何默认的实现。所有的接口属性都必须是常量。然而，当一个类从一个单独的超级类继承而来，它可以实现多个接口。<br />当一个接口在图中单列出来，它既可以显示为类元素的方框，带 «interface» 关键字和表明它是抽象的斜体名称，也可以显示为圆环。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-interface.gif"/></div><p>注意：圆环标注不显示接口操作。当接口显示为类所有的接口，它们会被当作暴露接口引用。暴露接口可以定义为是提供的，还是需求的。提供接口确认包含它的类元提供指定接口元素定义的操作，可通过类和接口间实现的连接来定义。需求接口说明该类元能与其他类元进行通信，这些类元提供了指定接口元素所定义的操作。需求接口可通过在类和接口间建立依赖连接来定义。<br />提供接口显示为“带棒球体”，依附在类元边缘。需求接口显示为“带棒杯体”，也是依附在类元边缘。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-interface-02.gif"/></div><h3 id="委托"><a class="markdownIt-Anchor" href="#委托"></a> 委托</h3><p>委托连接器用来定义组件外部端口和接口的内部工作方式。委托连接器表示为带有 «delegate» 关键字的箭头。它连接组件的外部约定，表现为它的端口，到组件部件行为的内部实现。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-delegate.gif"/></div><h3 id="协作"><a class="markdownIt-Anchor" href="#协作"></a> 协作</h3><p>协作定义了一系列共同协作的角色，它们集体展示一个指定的设计功能。协作图应仅仅显示完成指定任务或功能的角色与属性。隔离主要角色是用来简化结构和澄清行为，也用于重用。一个协作通常实现一个模式。<br />协作元素显示为椭圆。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-collaboration.gif"/></div><h3 id="角色绑定"><a class="markdownIt-Anchor" href="#角色绑定"></a> 角色绑定</h3><p>角色绑定连接器是一条从连接协作到所要完成该任务类元的连线。它显示为虚线，并在类元端显示作用名。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-role-binding.gif"/></div><h3 id="表现"><a class="markdownIt-Anchor" href="#表现"></a> 表现</h3><p>表现连接器用于连接协作到类元来表示此类元中使用了该协作。显示为带关键字 «represents»的虚线箭头。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-represent.gif"/></div><p>发生<br />发生连接器用于连接协作到类元来表示此协作表现了（同原文）该类元；显示为带关键字«occurrence»的虚线箭头。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-occurrence.gif"/></div><h2 id="对象图"><a class="markdownIt-Anchor" href="#对象图"></a> 对象图</h2><blockquote><p><strong>对象图（Object Diagram）可以认为是类图的特殊情形，是类图元素子集，被用来及时强调在某些点，类的实例间的关系</strong>。这对理解类图很有帮助。他们在构造上与类图显示没有不同，但是反映出多样性和作用。</p></blockquote><h3 id="类和对象元素"><a class="markdownIt-Anchor" href="#类和对象元素"></a> 类和对象元素</h3><p>下面的图显示了类元素和对象元素外观上的不同。注意：类元素包括三个部分，分别是名字栏，属性栏和操作栏；对象元素默认为没有分栏。名称显示也有不同：对象名称有下划线，并可能显示该对象实例化所用类元的名称。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-object.gif"/></div><h3 id="运行状态"><a class="markdownIt-Anchor" href="#运行状态"></a> 运行状态</h3><p>类元元素可以有任意数量的属性和操作。在对象实例中不会被显示出来。但可能定义对象的运行状态，显示特殊实例的属性设置值。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-run-time-state.gif"/></div><h3 id="类和对象图示例"><a class="markdownIt-Anchor" href="#类和对象图示例"></a> 类和对象图示例</h3><p>下图是一个对象图，其中插入了类定义图。它例示如何用对象图来测试类图中任务多重性的方法。“car” 类对 “wheel” 类有“1 对多” 的多重性，但是如果已经选择用“1 对 4” 来替代，那样就不会在对象图显示“3 个轮子”的汽车。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-object-diagram.gif"/></div><h2 id="活动图"><a class="markdownIt-Anchor" href="#活动图"></a> 活动图</h2><blockquote><p>UML 中，活动图用来展示活动的顺序。<strong>显示了从起始点到终点的工作流，描述了活动图中存在于事件进程的判断路径</strong>。活动图可以用来详细阐述某些活动执行中发生并行处理的情况。活动图对业务建模也比较有用，用来详细描述发生在业务活动中的过程。<br />一个活动图的示例如下所示。</p></blockquote><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-diagram.gif"/></div><p>下面描述组成活动图的元素。</p><h3 id="活动"><a class="markdownIt-Anchor" href="#活动"></a> 活动</h3><p>活动是行为参数化顺序的规范。活动被表示为圆角矩形，内含全部的动作，工作流和其他组成活动的元素。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity.gif"/></div><h3 id="动作"><a class="markdownIt-Anchor" href="#动作"></a> 动作</h3><p>一个动作代表活动中的一个步骤。动作用圆角矩形表示。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-action.gif"/></div><h3 id="动作约束"><a class="markdownIt-Anchor" href="#动作约束"></a> 动作约束</h3><p>动作可以附带约束，下图显示了一个带前置条件和后置条件的动作。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-conditions.gif"/></div><h3 id="控制流"><a class="markdownIt-Anchor" href="#控制流"></a> 控制流</h3><p>控制流显示一个动作到下一个动作的流。表示为带箭头实线</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-edge.gif"/></div><h3 id="初始节点"><a class="markdownIt-Anchor" href="#初始节点"></a> 初始节点</h3><p>一个开始或起始点用大黑圆点表示，如下图。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-initial.gif"/></div><h3 id="结束节点"><a class="markdownIt-Anchor" href="#结束节点"></a> 结束节点</h3><p>结束节点有两种类型：活动结束节点和流结束节点。活动结束节点表示为中心带黑点的圆环。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-final.gif"/></div><p>流结束节点表示为内部为叉号的圆环。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-flow-final.gif"/></div><p>这两种不同类型节点的区别为：流结束节点表明单独的控制流的终点。活动结束终点是活动图内所有控制流的结束。</p><h3 id="对象和对象流"><a class="markdownIt-Anchor" href="#对象和对象流"></a> 对象和对象流</h3><p>对象流是对象和数据转递的通道。对象显示为矩形。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-object.gif"/></div><p>对象流显示为带箭头的连接器，表明方向和通过的对象。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-object-flow.gif"/></div><p>一个对象流在它的至少一个终端有一个对象。在上图中，可以采用带输入输出引脚的速记标柱表示。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-object-flow-alt.gif"/></div><p>数据存储显示为带 «datastore» 关键字的对象。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-data-store.gif"/></div><h3 id="判断节点和合并节点"><a class="markdownIt-Anchor" href="#判断节点和合并节点"></a> 判断节点和合并节点</h3><p>判断节点和合并节点是相同标注：菱形。它们可以被命名。从判断节点出来的控制流有监护条件，当监护条件满足时，可以对流控制。下图显示了判断节点和合并节点的使用。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-decision-or-merge.gif"/></div><h3 id="分叉和结合节点"><a class="markdownIt-Anchor" href="#分叉和结合节点"></a> 分叉和结合节点</h3><p>分叉和结合节点有同样的标柱：垂直或水平条（方向取决于工作流从左到右，还是从上到下）。它们说明了控制的并发线程的起始和终点，下图显示他们的使用示例。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-fork-and-join.gif"/></div><p>结合节点与合并节点不同之处在于：结合节点同步两个输入量，产生一个单独的输出量。来自结合节点的输出量要接收到所有的输入量后才能执行。合并节点直接将控制流传递通过。如果两个或更多的输入量到达合并节点。则它的输出流指定的动作会被执行两次或更多次。</p><h3 id="扩展域"><a class="markdownIt-Anchor" href="#扩展域"></a> 扩展域</h3><p>扩展域是会执行多次的结构活动域。输入输出扩展节点表示为一组“3 厢” ，代表多个选择项。关键词 “iterative”， “parallel” 或 &quot;stream&quot;显示在区域的左上角</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-expansion-region.gif"/></div><h3 id="异常处理器"><a class="markdownIt-Anchor" href="#异常处理器"></a> 异常处理器</h3><p>异常处理器在活动图中可以建模。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-exception-handler.gif"/></div><h3 id="可中断活动区"><a class="markdownIt-Anchor" href="#可中断活动区"></a> 可中断活动区</h3><p>可中断活动区环绕一组可以中断的动作。在下面非常简单的例子中： 当控制被传递到结束订单 “Close Order” 动作，定单处理&quot;Process Order&quot; 动作会执行直到完成，除非&quot;Cancel Request&quot;取消请求中断被接受，这会将控制传递给&quot;Cancel Order&quot;动作。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-interruptible-activity-region.gif"/></div><h3 id="分割"><a class="markdownIt-Anchor" href="#分割"></a> 分割</h3><p>一个活动分割显示为垂直或水平泳道。在下图中，分割被用来在活动图中分隔动作，有在 &quot;accounting department&quot;中执行的，有在 &quot;customer&quot;中执行的。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-activity-partitions.gif"/></div><h2 id="状态机图"><a class="markdownIt-Anchor" href="#状态机图"></a> 状态机图</h2><blockquote><p><strong>状态机图（state-machine-diagram）对一个单独对象的行为建模，指明对象在它的整个生命周期里，响应不同事件时，执行相关事件的顺序。</strong></p></blockquote><p>如下示例， 下列的状态机图显示了门在它的整个生命周期里如何运作。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-diagram.gif"/></div><p>门可以处于以下的三种状态之一： &quot;Opened&quot;打开状态， &quot;Closed&quot;关闭状态，或者&quot;Locked&quot;锁定状态。 它分别响应事件：“Open”开门， “Close”关门， “Lock”锁门 和 “Unlock”解锁。 注意：不是所有的事件，在所有的状态下都是有效的。如：一个门打开的时候是不可能锁定的，除非你关上门。并且，状态转移可能有附加监护条件：假设门是开的，如果“doorWay-&gt;isEmpty”（门是空的）被满足，那么它只能响应关门事件。状态机图使用的语法和约定将在下面的部分进行讨论。</p><h3 id="状态"><a class="markdownIt-Anchor" href="#状态"></a> 状态</h3><p>状态被表示为圆角矩形，状态名写在里面。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state.gif"/></div><h3 id="起始和结束状态"><a class="markdownIt-Anchor" href="#起始和结束状态"></a> 起始和结束状态</h3><p>初始状态表示为实心黑圆环，可以标注名称。结束状态表示为中心带黑点圆环，也可以被标注名称。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-initial-and-final.gif"/></div><h3 id="转移"><a class="markdownIt-Anchor" href="#转移"></a> 转移</h3><p>一个状态到下一个状态的转移表示为带箭头实线。转移可以有一个“Trigger”触发器，一个“Guard”监护条件和一个“effect”效果。如下所示：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-transition.gif"/></div><p>&quot;Trigger&quot;触发器是转移的起因，它可以是某个条件下的一个信号，一个事件，一个变化或一个时间通路。&quot;Guard&quot;监护是一个条件，而且必须为真，以便于让触发器引起转移。效果&quot;Effect&quot;是直接作用到对象上的一个动作，该对象具有做为转移结果的状态机。</p><h3 id="状态活动"><a class="markdownIt-Anchor" href="#状态活动"></a> 状态活动</h3><p>在上面的状态转移示例中，一个效果与该转移相关联。如果目标状态有多个转移到达，并且每一个转移都有相同的效果与它相关联，那最好将该效果与目标状态相关联，而不与转移相关联。你可以通过为这个状态定义初始动作来实现。下图显示了一个带入口动作和出口动作的状态。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-entry-and-exit.gif"/></div><p>可以定义发生在事件上的动作或一直发生的动作。每一种类型的动作是可以定义任意数量的。</p><h3 id="自转移"><a class="markdownIt-Anchor" href="#自转移"></a> 自转移</h3><p>一个状态可能有一个返回到自身的转移，如下图。效果与转移关联是十分有帮助。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-self-transition.gif"/></div><h3 id="复合状态"><a class="markdownIt-Anchor" href="#复合状态"></a> 复合状态</h3><p>一个状态机图可以有子状态机图，如下图所示：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-compound.gif"/></div><p>可选择不同方式显示相同信息，如下图所示：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-composite.gif"/></div><p>上面版本的标注说明&quot;Check PIN&quot;的子状态机图显示在单独的图中。</p><h3 id="入口点"><a class="markdownIt-Anchor" href="#入口点"></a> 入口点</h3><p>有时，你不想在正常的初始状态进入子状态机。例如下面的子状态机，它通常从&quot;初始化&quot;状态开始，但是如果因为某些原因，它不必执行初始化，可能靠转移到指定的入口点来从 “Ready” 状态开始。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-entry-point.gif"/></div><p>下图显示了状态机的上一层。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-entry-point-higher.gif"/></div><h3 id="出口点"><a class="markdownIt-Anchor" href="#出口点"></a> 出口点</h3><p>有与入口点相类似的方式，它可能也指定可选择的出口点。下图给出了主处理状态执行后，所执行状态的去向将取决于该状态转移时所使用的路径。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-exit-point.gif"/></div><h3 id="选择伪状态"><a class="markdownIt-Anchor" href="#选择伪状态"></a> 选择伪状态</h3><p>选择伪状态显示为菱形，有一个转移输入，两个或多个输出。下图显示不管到达哪一个状态，经过选择伪状态后的去向，取决于在伪状态中执行时所选择的消息格式。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-choice.gif"/></div><h3 id="连接伪状态"><a class="markdownIt-Anchor" href="#连接伪状态"></a> 连接伪状态</h3><p>连接伪状态用来将多个状态转移链接在一起。一个单独的连接伪状态可以有一个或多个输入和一个或多个输出，监护可能应用于每一个转移，连接是没有语义的。连接可以把一个输入转移分成多个输出转移来实现一个静态分支。与之对照的是选择伪状态实现一个动态条件分支。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-junction.gif"/></div><h3 id="终止伪状态"><a class="markdownIt-Anchor" href="#终止伪状态"></a> 终止伪状态</h3><p>进入终止伪状态是指状态机生命线已经终止。终止伪状态表示为叉号。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-terminate.gif"/></div><h3 id="历史状态"><a class="markdownIt-Anchor" href="#历史状态"></a> 历史状态</h3><p>历史状态用来当状态机中断时，恢复状态机之前状态。下面例图说明了历史状态的使用。这个例子是关于洗衣机的状态机。</p><p>在这个状态机中，当洗衣机运行时，它会按照&quot;Washing&quot; 到 Rinsing&quot;再到&quot;Spinning&quot;来进行。如果电源被切断 ，洗衣机会停止运行并进入&quot;Power Off&quot; 状态。当电源恢复，运行状态在&quot;History State&quot;符号处进入，表示它会从上次离开的地方恢复。</p><h3 id="并发区"><a class="markdownIt-Anchor" href="#并发区"></a> 并发区</h3><p>一个状态可以被分成几个不同的区，包含同时存在和执行的子状态。下面的例子显示状态 “Applying Brakes”， “front brake&quot;和&quot;rear brakes” 将同时独立运作。注意使用了分叉和结合伪状态而不是选择和合并伪状态。这些符号用来同步并发的线程。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-concurrent-regions.gif"/></div><h2 id="用例图"><a class="markdownIt-Anchor" href="#用例图"></a> 用例图</h2><blockquote><p><strong>用例图用来记录系统的需求，它提供系统与用户及其他参与者的一种通信手段。</strong></p></blockquote><h3 id="执行者"><a class="markdownIt-Anchor" href="#执行者"></a> 执行者</h3><p>用例图显示了系统和系统外实体之间的交互。这些实体被引用为执行者。执行者代表角色，可以包括：用户，外部硬件和其他系统。执行者往往被画成简笔画小人。也可以用带«actor»关键字的类矩形表示。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-actor.gif"/></div><p>在下图中，执行者可以详细的泛化其他执行者:</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-generalize.gif"/></div><h3 id="用例"><a class="markdownIt-Anchor" href="#用例"></a> 用例</h3><p>用例是有意义的单独工作单元。它向系统外部的人或事提供一个易于观察的高层次行为视图。 用例的标注符号是一个椭圆。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case.gif"/></div><p>使用用例的符号是带可选择箭头的连接线，箭头显示控制的方向。下图说明执行者 &quot;Customer&quot;使用 &quot;Withdraw&quot;用例。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-use.gif"/></div><p>用途连接器（uses connector）可以有选择性的在每一个端点有多重性值，如下图，显示客户一次可能只执行一次取款交易。但是银行可以同时执行许多取款交易。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-multiplicity-use.gif"/></div><h3 id="用例定义"><a class="markdownIt-Anchor" href="#用例定义"></a> 用例定义</h3><p>一个典型的用例包括:</p><ul><li><strong>名称和描述</strong> - 用例通常用一个动词词组定义，而且有一个简短的文字说明。</li><li><strong>需求</strong> - 需求定义了一个用例必须提供给终端用户的正式功能性需求。它们符合构造方法建立的功能性规范。一个需求是用例将执行一个动作或提供多个值给系统的约定或承诺。</li><li><strong>约束</strong> - 一个约束是一个用例运行的条件或限制。它包括：前置条件，后置条件和不变化条件 。前置条件指明了用例在发生之前需要符合的条件。后置条件用来说明在用例执行之后一些条件必须为&quot;真&quot;。不变化条件说明用例整个执行过程中该条件始终为&quot;真&quot;。</li><li><strong>情形</strong> - 情形是用例的实例在执行过程中，事件发生流程的形式描述。它定义了系统和外部执行者之间的事件指定顺序。通常用文本方式来表示，并对应时序图中的文字描述。</li><li><strong>情形图</strong></li><li><strong>附加信息</strong></li></ul><h3 id="包含用例"><a class="markdownIt-Anchor" href="#包含用例"></a> 包含用例</h3><p>用例可能包含其他用例的功能来作为它正常处理的一部分。通常它假设，任何被包含的用例在基本程序运行时每一次都会被调用。下面例子：用例“卡的确认”<Card Identification> 在运行时，被用例“取钱”<Withdraw>当作一个子部分。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-include.gif"/></div><p>用例可以被一个或多个用例包含。通过提炼通用的行为，将它变成可以多次重复使用的用例。有助于降低功能重复级别。</p><h3 id="扩展用例"><a class="markdownIt-Anchor" href="#扩展用例"></a> 扩展用例</h3><p>一个用例可以被用来扩展另一个用例的行为，通常使用在特别情况下。例如：假设在修改一个特别类型的客户订单之前，用户必须得到某种更高级别的许可，然后“获得许可”<Get Approval>用例将有选择的扩展常规的“修改订单”<Modify Order>用例。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-extend.gif"/></div><p><strong>扩展点</strong> - 扩展用例的加入点被定义为扩展点。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-extend-with-condition.gif"/></div><p><strong>系统边界</strong> - 它用来显示用例在系统内部，执行者在系统的外部。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-use-case-system-boundary.gif"/></div><h2 id="通信图"><a class="markdownIt-Anchor" href="#通信图"></a> 通信图</h2><blockquote><p>通信图，以前称之为协作图，是一种交互图，<strong>所显示消息与时序图相似，但是它更侧重于对象间的联系</strong>。</p></blockquote><p>在通信图中，对象之间显示关联连接器。消息附加到这些关联上，显示短箭头指向消息流的方向。消息的顺序通过编号码显示。</p><p>下面的两个图用通信图和时序图分别显示相同的信息。尽管我们可能从通信图的编号码得到消息顺序，但它不是立即可见的。通信图十分清楚的显示了邻近对象间全部完整的消息传递。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-communications-diagram.gif"/></div><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-diagram.gif"/></div><h2 id="交互概述图"><a class="markdownIt-Anchor" href="#交互概述图"></a> 交互概述图</h2><blockquote><p><strong>一个交互概览图是活动图的一种形式，它的节点代表交互图。交互图包含时序图，通信图，交互概览图和时间图。 大多数交互概览图标注与活动图一样。例如：起始，结束，判断，合并，分叉和结合节点是完全相同。并且，交互概览图介绍了两种新的元素：交互发生和交互元素。</strong></p></blockquote><h3 id="交互发生"><a class="markdownIt-Anchor" href="#交互发生"></a> 交互发生</h3><p>交互发生引用现有的交互图。显示为一个引用框，左上角显示 “ref” 。被引用的图名显示在框的中央。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-interaction-overview-01.gif"/></div><h3 id="交互元素"><a class="markdownIt-Anchor" href="#交互元素"></a> 交互元素</h3><p>交互元素与交互发生相似之处在于都是在一个矩形框中显示一个现有的交互图。不同之处在内部显示参考图的内容不同。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-interaction-overview-02.gif"/></div><h3 id="将它们放在一起"><a class="markdownIt-Anchor" href="#将它们放在一起"></a> 将它们放在一起</h3><p>所有的活动图控件，都可以相同地被使用于交互概览图，如：分叉，结合，合并等等。它把控制逻辑放入较低一级的图中。下面的例子就说明了一个典型的销售过程。子过程是从交互发生抽象而来。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-interaction-overview-diagram.gif"/></div><h2 id="时序图"><a class="markdownIt-Anchor" href="#时序图"></a> 时序图</h2><blockquote><p><strong>时序图是交互图的一种形式，它显示对象沿生命线发展，对象之间随时间的交互表示为从源生命线指向目标生命线的消息。时序图能很好地显示那些对象与其它那些对象通信，什么消息触发了这些通信，时序图不能很好显示复杂过程的逻辑。</strong></p></blockquote><h3 id="生命线"><a class="markdownIt-Anchor" href="#生命线"></a> 生命线</h3><p>一条生命线在时序图中代表一个独立的参与者。表示为包含对象名的矩形，如果它的名字是&quot;self&quot;，则说明该生命线代表控制带时序图的类元。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-lifelines.gif"/></div><p>有时，时序图会包含一个顶端是执行者的生命线。这情况说明掌握这个时序图的是用例。健壮图中的边界，控制和实体元素也可以有生命线。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-more-lifelines.gif"/></div><h3 id="消息"><a class="markdownIt-Anchor" href="#消息"></a> 消息</h3><p>消息显示为箭头。消息可以完成传输，也可能丢失和找回，它可以是同步的，也可以是异步的，即可以是调用，也可以是信号。在下图中，第一条消息是同步消息(标为实箭头)完成传输，并隐含一条返回消息。第二条消息是异步消息 (标为实线箭头)，第三条是异步返回消息(标为虚线)。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-messages.gif"/></div><h3 id="执行发生"><a class="markdownIt-Anchor" href="#执行发生"></a> 执行发生</h3><p>向下延伸的细条状矩形表示执行事件或控制焦点的激活。在上图中有三个执行事件。第一个是源对象发送两条消息和收到两条回复。第二个是目标对象收到一条同步消息并返回一条回复。第三个是目标对象收到一条异步消息并返回一条回复。</p><h3 id="内部通信"><a class="markdownIt-Anchor" href="#内部通信"></a> 内部通信</h3><p>内部消息表现为一个操作的递归调用，或一个方法调用属于同一个对象的其他方法。显示为生命线上执行事件的嵌套控制焦点。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-recursion.gif"/></div><h3 id="迷路消息和拾取消息"><a class="markdownIt-Anchor" href="#迷路消息和拾取消息"></a> 迷路消息和拾取消息</h3><p>迷路消息是那些发送了却没有到达指定接收者，或者到达的接收者不再当前图中。拾取消息是收到来自那些未知的发送者，或者来自没有显示在当前图的发送者的消息。它们都表明是去往或来自一个终点元素。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-lost-and-found.gif"/></div><h3 id="生命线开始与结束"><a class="markdownIt-Anchor" href="#生命线开始与结束"></a> 生命线开始与结束</h3><p>生命线可以在时序图时间刻度范围内创建和销毁，在下面的例子中，生命线被停止符号（叉号）终止。在前面的例子中，生命线顶端的符号（Child）显示在比创建它的对象符号（parent）沿页面要低的位置上。下图显示创建和终止对象。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-lost-and-found.gif"/></div><h3 id="时间和期限约束"><a class="markdownIt-Anchor" href="#时间和期限约束"></a> 时间和期限约束</h3><p>消息默认显示为水平线。因为生命线显示为沿屏幕向下的时间通道，所以当给实时系统建模，或是有时间约束的业务过程建模，考虑执行动作所需时间长度是很重要的。因此可以给消息设置一个期限约束，这样的消息显示为下斜线。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-time.gif"/></div><h3 id="复合片段"><a class="markdownIt-Anchor" href="#复合片段"></a> 复合片段</h3><p>如前面所说，时序图不适合表达复杂的过程逻辑。在一种情况下，有许多机制允许把一定程度的过程逻辑加入到图中，并把它们放到复合片段的标题下。复合片段是一个或多个处理顺序被包含在一个框架中，并在指定名称的环境下执行。片段可以是:</p><ul><li>选择性片段 (显示 “alt”) 为 if…then…else 结构建模。</li><li>选项片段 (显示 “opt”) 为 “switch”(开关) 结构建模。</li><li>中断片段对被处理事件的可选择顺序建模，而不是该图的其他部分。</li><li>并行片段(显示 “par”) 为并发处理建模。</li><li>弱顺序片段 (显示 “seq”) 包含了一组消息，这组消息必须在后继片段开始之前被处理。但不会把片段内消息的先后顺序强加到不共享同一条生命线的消息上。</li><li>严格顺序片段 (显示 “strict”) 包含了一系列需要按照给定顺序处理的消息。</li><li>非片段 (显示 “neg”) 包含了一系列不可用的消息。</li><li>关键片段 具有关键部分。</li><li>忽略片段 声明一个没有意义的消息，如果它出现在当前上下文中。</li><li>考虑片段与忽略片段相反，不包含在考虑片段内的消息都应该被忽略。</li><li>断言片段 (显示 “assert”)标明任何没有显示为声明操作数的顺序都是无效的。</li><li>循环片段 包含一系列被重复的消息。</li></ul><p>下图显示的是循环片段：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-fragment.gif"/></div><p>这也是一个类似于复合片段的交互发生。 交互发生被其他图参考，显示为左上角带&quot;ref&quot;，将被参考图名显示在方框的中间。</p><h3 id="门"><a class="markdownIt-Anchor" href="#门"></a> 门</h3><p>门是连接片段内消息和片段外消息的连接点。 在 EA 中，门显示为片段框架上的小正方形。作用为时序图与页面外的连接器。 用来表示进来的消息源，或者出去消息的终点。下面两个图显示它们在实践中的使用。注意：&quot; top level diagram&quot;中的门用消息箭头指向参考片段，在这里没有必要把它画成方块。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-top-level-diagram.gif"/></div><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-nested-diagram.gif"/></div><h3 id="部分分解"><a class="markdownIt-Anchor" href="#部分分解"></a> 部分分解</h3><p>一个对象可以引出多条生命线，使得对象内部和对象之间的消息显示在同一图上。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-part-decomposition.gif"/></div><h3 id="状态常量延续"><a class="markdownIt-Anchor" href="#状态常量延续"></a> 状态常量/延续</h3><p>状态常量是生命线的约束，运行时始终为&quot;真&quot;。显示为两侧半圆的矩形，如下图：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-sequence-state-invariant.gif"/></div><p>延续虽与状态常量有同样的标注，但是被用于复合片段，并可以延伸跨越多条生命线。</p><h2 id="时间图"><a class="markdownIt-Anchor" href="#时间图"></a> 时间图</h2><blockquote><p><strong>UML 时间图被用来显示随时间变化，一个或多个元素的值或状态的更改。也显示时控事件之间的交互和管理它们的时间和期限约束。</strong></p></blockquote><h3 id="状态生命线"><a class="markdownIt-Anchor" href="#状态生命线"></a> 状态生命线</h3><p>状态生命线显示随时间变化，一个单项状态的改变。不论时间单位如何选择，X 轴显示经过的时间，Y 轴被标为给出状态的列表。状态生命线如下所示：</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-state-lifeline.gif"/></div><h3 id="值生命线"><a class="markdownIt-Anchor" href="#值生命线"></a> 值生命线</h3><p>值生命线显示随时间变化，一个单项的值的变化。X 轴显示经过的时间，时间单位为任意，和状态生命线一样。平行线之间显示值，每次值变化，平行线交叉。如下图所示。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-value-lifeline.gif"/></div><h3 id="将它们放在一起-2"><a class="markdownIt-Anchor" href="#将它们放在一起-2"></a> 将它们放在一起</h3><p>状态和值的生命线能叠加组合。它们必须有相同的 X 轴。 消息可以从一个生命线传递到另一个。每一个状态和值的变换能有一个定义的事件，一个时间限制是指一个事件何时必须发生，和一个期限限制说明状态或值多长时间必须有效。一旦这些已经被应用，其时间图可能显示如下。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/design/uml/uml-timing-diagram.gif"/></div><h2 id="uml-工具"><a class="markdownIt-Anchor" href="#uml-工具"></a> UML 工具</h2><p>UML 工具非常多，到底哪种工具好，真的是仁者见仁智者见智。这里列举一些我接触过的 UML 工具：</p><h3 id="亿图"><a class="markdownIt-Anchor" href="#亿图"></a> 亿图</h3><blockquote><p>国内开发的、收费的绘图工具。图形模板、素材非常全面，样式也很精美，可以导出为 word、pdf、图片。</p><p><a href="http://www.edrawsoft.cn/" target="_blank" rel="noopener">亿图官网</a></p></blockquote><div align="center"><img src="http://www.edrawsoft.cn/images/software/createsoftware.png"/></div><h3 id="visio"><a class="markdownIt-Anchor" href="#visio"></a> Visio</h3><blockquote><p>Office 的绘图工具，特点是简单、清晰。</p><p><a href="https://products.office.com/zh-cn/visio/flowchart-software" target="_blank" rel="noopener">Visio 官网</a></p></blockquote><div align="center"><img src="https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE2jMC4?ver=5361&q=90&h=675&w=830&b=%23FFFFFFFF&aim=true"/></div><h3 id="staruml"><a class="markdownIt-Anchor" href="#staruml"></a> StarUML</h3><blockquote><p>样式精美，功能全面的 UML 工具。</p><p><a href="http://staruml.io/" target="_blank" rel="noopener">StarUML 官网</a></p></blockquote><div align="center"><img src="http://staruml.io/image/screenshot_jumbotron.png"/></div><h3 id="astah"><a class="markdownIt-Anchor" href="#astah"></a> Astah</h3><blockquote><p>样式不错，功能全面的绘图工具。</p><p><a href="http://astah.net/" target="_blank" rel="noopener">Astah 官网</a></p></blockquote><div align="center"><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1539757904141&di=7e4f71d0a00ffcd87e0e5aa62f0ed168&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D3525476819%2C2924170461%26fm%3D214%26gp%3D0.jpg"/></div><h3 id="argouml"><a class="markdownIt-Anchor" href="#argouml"></a> ArgoUML</h3><blockquote><p>UML 工具。</p><p><a href="https://argouml.en.softonic.com/?ex=CAT-759.2" target="_blank" rel="noopener">ArgoUML 官网</a></p></blockquote><div align="center"><img src="https://gss0.bdstatic.com/-4o3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=f4e8a7c6923df8dcb23087c3ac7819ee/8b13632762d0f70315a83ced05fa513d2697c5ed.jpg"/></div><h3 id="processon"><a class="markdownIt-Anchor" href="#processon"></a> ProcessOn</h3><blockquote><p>在线绘图工具，特点是简洁、清晰。</p><p><a href="https://www.processon.com/" target="_blank" rel="noopener">ProcessOn 官网</a></p></blockquote><h3 id="drawio"><a class="markdownIt-Anchor" href="#drawio"></a> drawio</h3><blockquote><p>开源的在线绘图工具，特点是简洁、清晰。</p><p><a href="https://www.draw.io/" target="_blank" rel="noopener">drawio 官网</a></p></blockquote><h2 id="更多内容"><a class="markdownIt-Anchor" href="#更多内容"></a> 更多内容</h2><blockquote><p>📓 本文已归档到：「<a href="https://github.com/dunwu/blog" target="_blank" rel="noopener">blog</a>」</p></blockquote><h3 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h3><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">Wiki-UML</a></li><li><a href="https://sparxsystems.cn/resources/uml2_tutorial/index.html" target="_blank" rel="noopener">Sparx UML 教程</a></li><li><a href="https://www.omg.org/spec/UML" target="_blank" rel="noopener">OMG UML</a></li><li><a href="https://www.tutorialspoint.com/uml/index.htm" target="_blank" rel="noopener">UML Tutorial</a></li><li><a href="https://www.w3cschool.cn/uml_tutorial/" target="_blank" rel="noopener">W3Cschool UML 教程</a></li><li><a href="https://blog.csdn.net/soft_zzti/article/details/79811923" target="_blank" rel="noopener">UML 学习入门就这一篇文章</a></li><li><a href="http://www.cnblogs.com/ywqu/category/223486.html" target="_blank" rel="noopener">http://www.cnblogs.com/ywqu/category/223486.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;uml-教程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#uml-教程&quot;&gt;&lt;/a&gt; UML 教程&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;关键词：&lt;code&gt;部署图&lt;/code&gt;, &lt;code&gt;组件图&lt;/code&gt;, &lt;code&gt;包
      
    
    </summary>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/categories/design/"/>
    
    
      <category term="design" scheme="https://dunwu.github.io/blog/tags/design/"/>
    
      <category term="uml" scheme="https://dunwu.github.io/blog/tags/uml/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络之网络层</title>
    <link href="https://dunwu.github.io/blog/communication/network-network/"/>
    <id>https://dunwu.github.io/blog/communication/network-network/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-08-21T05:20:31.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络之网络层"><a class="markdownIt-Anchor" href="#计算机网络之网络层"></a> 计算机网络之网络层</h1><blockquote><p><strong>网络层（network layer）</strong> - 为分组交换网上的不同主机提供通信服务。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送。</p><ul><li>主要协议：<code>IP</code>、<code>ICMP</code>。</li><li>数据单元：IP 数据报（packet）。</li><li>典型设备：网关、路由器。</li></ul></blockquote><!-- TOC depthFrom:2 depthTo:3 --><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#ip-%E5%8D%8F%E8%AE%AE">IP 协议</a><ul><li><a href="#%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE">相关协议</a></li><li><a href="#%E5%88%86%E7%B1%BB%E7%9A%84-ip-%E5%9C%B0%E5%9D%80">分类的 IP 地址</a></li><li><a href="#ip-%E5%9C%B0%E5%9D%80%E4%B8%8E%E7%89%A9%E7%90%86%E5%9C%B0%E5%9D%80">IP 地址与物理地址</a></li><li><a href="#ip-%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F">IP 数据报格式</a></li></ul></li><li><a href="#%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE-arp">地址解析协议 ARP</a></li><li><a href="#%E7%BD%91%E9%99%85%E6%8E%A7%E5%88%B6%E6%8A%A5%E6%96%87%E5%8D%8F%E8%AE%AE-icmp">网际控制报文协议 ICMP</a><ul><li><a href="#1-ping">1. Ping</a></li><li><a href="#2-traceroute">2. Traceroute</a></li></ul></li><li><a href="#%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E7%BD%91-vpn">虚拟专用网 VPN</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2-nat">网络地址转换 NAT</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E5%99%A8%E7%9A%84%E7%BB%93%E6%9E%84">路由器的结构</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%86%E7%BB%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B">路由器分组转发流程</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9%E5%8D%8F%E8%AE%AE">路由选择协议</a><ul><li><a href="#1-%E5%86%85%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE-rip">1. 内部网关协议 RIP</a></li><li><a href="#2-%E5%86%85%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE-ospf">2. 内部网关协议 OSPF</a></li><li><a href="#3-%E5%A4%96%E9%83%A8%E7%BD%91%E5%85%B3%E5%8D%8F%E8%AE%AE-bgp">3. 外部网关协议 BGP</a></li></ul></li></ul><!-- /TOC --><h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2><p>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。网络层不提供服务质量的承诺，不保证分组交付的时限，所传送的分组可能出错、丢失、重复和失序。进程间通信的可靠性由运输层负责。</p><h2 id="ip-协议"><a class="markdownIt-Anchor" href="#ip-协议"></a> IP 协议</h2><p>网际协议 IP (Internet Protocol) 定义了三种功能：</p><ol><li>IP 定义了在 TCP/IP 互联网上数据传送的基本单元和数据格式。</li><li>IP 软件完成路由选择功能，选择数据传送的路径。</li><li>IP 包含了一组不可靠分组传送的规则，指明了分组处理、差错信息发生以及分组的规则。</li></ol><h3 id="相关协议"><a class="markdownIt-Anchor" href="#相关协议"></a> 相关协议</h3><p>与 IP 协议配套使用的还有三个协议：</p><ul><li>地址解析协议 ARP（Address Resolution Protocol）</li><li>网际控制报文协议 ICMP（Internet Control Message Protocol）</li><li>网际组管理协议 IGMP（Internet Group Management Protocol）</li></ul><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1550912617336.png"/></div><h3 id="分类的-ip-地址"><a class="markdownIt-Anchor" href="#分类的-ip-地址"></a> 分类的 IP 地址</h3><p>IP 地址的编址方式经历了三个历史阶段：</p><ul><li>分类</li><li>子网划分</li><li>无分类</li></ul><h4 id="1-分类"><a class="markdownIt-Anchor" href="#1-分类"></a> 1. 分类</h4><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p><figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">IP 地址 ::= &#123;&lt; 网络号 &gt;, &lt; 主机号 &gt;&#125;</span><br></pre></td></tr></table></figure><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086738403.png"/></div><h4 id="2-子网划分"><a class="markdownIt-Anchor" href="#2-子网划分"></a> 2. 子网划分</h4><p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</p><figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">IP 地址 ::= &#123;&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;&#125;</span><br></pre></td></tr></table></figure><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><p>注意，外部网络看不到子网的存在。</p><h4 id="3-无分类"><a class="markdownIt-Anchor" href="#3-无分类"></a> 3. 无分类</h4><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p><figure class="highlight bnf"><table><tr><td class="code"><pre><span class="line">IP 地址 ::= &#123;&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;&#125;</span><br></pre></td></tr></table></figure><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 <strong>构成超网</strong> 。</p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><h3 id="ip-地址与物理地址"><a class="markdownIt-Anchor" href="#ip-地址与物理地址"></a> IP 地址与物理地址</h3><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551088476626.png"/></div><ul><li>物理地址是数据链路层和物理层使用的地址。</li><li>IP 地址是网络层和以上各层使用的地址，是一种逻辑地址。</li></ul><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551088631948.png"/></div><h3 id="ip-数据报格式"><a class="markdownIt-Anchor" href="#ip-数据报格式"></a> IP 数据报格式</h3><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1550913213250.png"/></div><ul><li><strong>版本</strong> - 有 4（IPv4）和 6（IPv6）两个值。</li><li><strong>首部长度</strong> - 占 4 位，因此最大十进制数值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为首部固定长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li><li><strong>区分服务</strong> - 用来获得更好的服务，一般情况下不使用。</li><li><strong>总长度</strong> - 包括首部长度和数据部分长度。占 16 位，因此数据报的最大长度为 2 <sup>16</sup> - 1 = 65535 字节。</li><li><strong>生存时间</strong> - TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li><li><strong>协议</strong> - 指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li><li><strong>首部检验和</strong> - 因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li><li><strong>标识</strong> - 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li><li><strong>片偏移</strong> - 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</li></ul><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1550913364479.png"/></div><h2 id="地址解析协议-arp"><a class="markdownIt-Anchor" href="#地址解析协议-arp"></a> 地址解析协议 ARP</h2><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086787261.png"/></div><p>ARP 实现由 IP 地址得到 MAC 地址。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086769846.png"/></div><p>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</p><p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086833117.png"/></div><h2 id="网际控制报文协议-icmp"><a class="markdownIt-Anchor" href="#网际控制报文协议-icmp"></a> 网际控制报文协议 ICMP</h2><p>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086857345.png"/></div><p>ICMP 报文分为差错报告报文和询问报文。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086870897.png"/></div><h3 id="1-ping"><a class="markdownIt-Anchor" href="#1-ping"></a> 1. Ping</h3><p>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p><p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p><h3 id="2-traceroute"><a class="markdownIt-Anchor" href="#2-traceroute"></a> 2. Traceroute</h3><p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p><p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。</p><ul><li>源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</li><li>源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</li><li>不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。</li><li>之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li></ul><h2 id="虚拟专用网-vpn"><a class="markdownIt-Anchor" href="#虚拟专用网-vpn"></a> 虚拟专用网 VPN</h2><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p><p>有三个专用地址块：</p><ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。</p><p>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086901339.png"/></div><h2 id="网络地址转换-nat"><a class="markdownIt-Anchor" href="#网络地址转换-nat"></a> 网络地址转换 NAT</h2><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p><p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p><h2 id="路由器的结构"><a class="markdownIt-Anchor" href="#路由器的结构"></a> 路由器的结构</h2><p>路由器从功能上可以划分为：路由选择和分组转发。</p><p>分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086930371.png"/></div><h2 id="路由器分组转发流程"><a class="markdownIt-Anchor" href="#路由器分组转发流程"></a> 路由器分组转发流程</h2><ul><li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li><li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li><li>报告转发分组出错。</li></ul><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086952828.png"/></div><h2 id="路由选择协议"><a class="markdownIt-Anchor" href="#路由选择协议"></a> 路由选择协议</h2><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p><p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ul><li>自治系统内部的路由选择：RIP 和 OSPF</li><li>自治系统间的路由选择：BGP</li></ul><h3 id="1-内部网关协议-rip"><a class="markdownIt-Anchor" href="#1-内部网关协议-rip"></a> 1. 内部网关协议 RIP</h3><p>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><p>距离向量算法：</p><ul><li>对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；</li><li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：</li><li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li><li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li><li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li></ul><p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><h3 id="2-内部网关协议-ospf"><a class="markdownIt-Anchor" href="#2-内部网关协议-ospf"></a> 2. 内部网关协议 OSPF</h3><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p><p>OSPF 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h3 id="3-外部网关协议-bgp"><a class="markdownIt-Anchor" href="#3-外部网关协议-bgp"></a> 3. 外部网关协议 BGP</h3><p>BGP（Border Gateway Protocol，边界网关协议）</p><p>AS 之间的路由选择很困难，主要是由于：</p><ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。</p><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/network/1551086977310.png"/></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机网络之网络层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络之网络层&quot;&gt;&lt;/a&gt; 计算机网络之网络层&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;网络层（network layer）&lt;/strong&gt; - 
      
    
    </summary>
    
    
      <category term="communication" scheme="https://dunwu.github.io/blog/categories/communication/"/>
    
    
      <category term="communication" scheme="https://dunwu.github.io/blog/tags/communication/"/>
    
      <category term="network" scheme="https://dunwu.github.io/blog/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>HDFS 命令</title>
    <link href="https://dunwu.github.io/blog/bigdata/hdfs/hdfs-cli/"/>
    <id>https://dunwu.github.io/blog/bigdata/hdfs/hdfs-cli/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-05-08T10:07:48.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hdfs-命令"><a class="markdownIt-Anchor" href="#hdfs-命令"></a> HDFS 命令</h1><ul><li>列出目录的内容：</li></ul><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hdfs dfs -ls /</span><br></pre></td></tr></table></figure><ul><li>将文件从本地文件系统加载到HDFS：</li></ul><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> hdfs dfs -<span class="keyword">put</span> songs.txt /user/adam</span><br></pre></td></tr></table></figure><ul><li>从HDFS读取文件内容：</li></ul><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -cat <span class="regexp">/user/</span>adam<span class="regexp">/songs.txt</span></span><br></pre></td></tr></table></figure><ul><li>更改文件的权限：</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -chmod <span class="number">700</span> /user/adam/songs.txt</span><br></pre></td></tr></table></figure><ul><li>将文件的复制因子设置为4：</li></ul><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -setrep -w <span class="number">4</span> /user/adam/songs.txt</span><br></pre></td></tr></table></figure><ul><li>检查文件的大小：</li></ul><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ hdfs dfs -du -h /user/adam/songs.txt Create a subdirectory in your <span class="built_in">home</span> directory.</span><br><span class="line">$ hdfs dfs -<span class="built_in">mkdir</span> songs</span><br></pre></td></tr></table></figure><p>注意，相对路径总是引用执行命令的用户的主目录。HDFS上没有“当前”目录的概念（换句话说，没有“CD”命令）：</p><ul><li><p>将文件移到新创建的子目录：</p><p>$ hdfs dfs -mv songs.txt songs</p></li><li><p>从HDFS中删除一个目录：</p><p>$ hdfs dfs -rm -r songs</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hdfs-命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hdfs-命令&quot;&gt;&lt;/a&gt; HDFS 命令&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;列出目录的内容：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight elixir
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络之数据链路层</title>
    <link href="https://dunwu.github.io/blog/communication/network-data-link/"/>
    <id>https://dunwu.github.io/blog/communication/network-data-link/</id>
    <published>2019-03-05T16:00:00.000Z</published>
    <updated>2019-08-21T05:20:30.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络之数据链路层"><a class="markdownIt-Anchor" href="#计算机网络之数据链路层"></a> 计算机网络之数据链路层</h1><blockquote><p><strong>数据链路层（Data Link Layer）</strong> - 网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</p><ul><li>主要协议：<code>PPP</code>、<code>CSMA/CD</code> 等。</li><li>数据单元：帧（frame）。</li><li>典型设备：二层交换机、网桥、网卡。</li></ul></blockquote><!-- TOC depthFrom:2 depthTo:3 --><ul><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98">基本问题</a><ul><li><a href="#%E5%B0%81%E8%A3%85%E6%88%90%E5%B8%A7">封装成帧</a></li><li><a href="#%E9%80%8F%E6%98%8E%E4%BC%A0%E8%BE%93">透明传输</a></li><li><a href="#%E5%B7%AE%E9%94%99%E6%A3%80%E6%B5%8B">差错检测</a></li></ul></li><li><a href="#%E7%82%B9%E5%AF%B9%E7%82%B9%E4%BF%A1%E9%81%93">点对点信道</a><ul><li><a href="#ppp-%E5%8D%8F%E8%AE%AE">PPP 协议</a></li></ul></li><li><a href="#%E5%B9%BF%E6%92%AD%E4%BF%A1%E9%81%93">广播信道</a><ul><li><a href="#csmacd-%E5%8D%8F%E8%AE%AE">CSMA/CD 协议</a></li></ul></li><li><a href="#%E5%B1%80%E5%9F%9F%E7%BD%91">局域网</a></li><li><a href="#%E4%BB%A5%E5%A4%AA%E7%BD%91">以太网</a></li><li><a href="#mac-%E5%9C%B0%E5%9D%80">MAC 地址</a></li><li><a href="#%E8%AE%BE%E5%A4%87">设备</a><ul><li><a href="#%E9%80%82%E9%85%8D%E5%99%A8">适配器</a></li><li><a href="#%E9%9B%86%E7%BA%BF%E5%99%A8">集线器</a></li><li><a href="#%E7%BD%91%E6%A1%A5">网桥</a></li><li><a href="#%E4%BB%A5%E5%A4%AA%E7%BD%91%E4%BA%A4%E6%8D%A2%E6%9C%BA">以太网交换机</a></li></ul></li></ul><!-- /TOC --><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><ul><li>链路是从一个节点到相邻节点的一段物理线路，数据链路则是在链路的基础上增加了一些必要的硬件（网络适配器）和软件（协议）。</li><li>数据链路层三个基本问题：封装成帧、透明传输、差错检测。</li><li>数据链路层有两种信道类型：点对点信道（主要使用 <code>PPP</code>）和广播信道（主要使用 <code>CSMA/CD</code>）。</li><li>以太网 MAC 层的地址。</li><li>适配器、转发器、集线器、网桥、以太网交换机的作用及使用场合。</li></ul><h2 id="基本问题"><a class="markdownIt-Anchor" href="#基本问题"></a> 基本问题</h2><h3 id="封装成帧"><a class="markdownIt-Anchor" href="#封装成帧"></a> 封装成帧</h3><p>为网络层传下来的 IP 数据报添加首部和尾部，用于标记帧的开始和结束。</p><p>为了提高传输效率，应该让数据部分长度尽可能大于首部和尾部。但是，每种链路层协议都限制了帧的数据部分长度上线——最大传送单元 MTU（Maximum Transfer Unit）</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/data-link/数据链路帧.png"/></div><h3 id="透明传输"><a class="markdownIt-Anchor" href="#透明传输"></a> 透明传输</h3><p><strong>透明</strong>表示：某一个实际存在的事物看起来好像不存在一样。</p><p>帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/data-link/经过字节填充后发送的数据.png"/></div><h3 id="差错检测"><a class="markdownIt-Anchor" href="#差错检测"></a> 差错检测</h3><p>目前数据链路层广泛使用了<a href="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A3%80%E9%AA%8C" target="_blank" rel="noopener"><strong>循环冗余检验 CRC（Cyclic redundancy check）</strong></a>来检查比特差错。</p><h2 id="点对点信道"><a class="markdownIt-Anchor" href="#点对点信道"></a> 点对点信道</h2><p>点对点信道使用一对一的点对点通信方式。</p><p>对于点对点的链路，点对点协议 PPP（Point-to-Point Protocol）是使用最广泛的数据链路层协议。</p><h3 id="ppp-协议"><a class="markdownIt-Anchor" href="#ppp-协议"></a> PPP 协议</h3><p>互联网用户通常都要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/data-link/PPP协议.png"/></div><p>PPP（点到点协议）是为在同等单元之间传输数据包这样的简单链路设计的链路层协议。这种链路提供全双工操作，并按照顺序传递数据包。设计目的主要是用来通过拨号或专线方式建立点对点连接发送数据，使其成为各种主机、网桥和路由器之间简单连接的一种共通的解决方案。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/data-link/PPP帧.png"/></div><p>PPP 的帧格式：</p><ul><li>F 字段为帧的定界符</li><li>A 和 C 字段暂时没有意义</li><li>FCS 字段是使用 CRC 的检验序列</li><li>信息部分的长度不超过 1500</li></ul><h2 id="广播信道"><a class="markdownIt-Anchor" href="#广播信道"></a> 广播信道</h2><p>广播信道(broadcast channel)是通过广播的方式传输信息的信息通道。</p><p>所有的节点都在同一个广播信道上发送数据，因此需要有专门的控制方法进行协调，避免发生冲突（冲突也叫碰撞）。</p><p>主要有两种控制方法进行协调，一个是使用信道复用技术，一是使用 CSMA/CD 协议。</p><h3 id="csmacd-协议"><a class="markdownIt-Anchor" href="#csmacd-协议"></a> CSMA/CD 协议</h3><p>CSMA/CD（Carrier Sense Multiple Access with Collision Detection）即带冲突检测的载波监听多路访问技术(载波监听多点接入/碰撞检测)。</p><ul><li><strong>多点接入</strong> ：说明这是总线型网络，许多计算机以多点接入的方式连接在一根总线上。</li><li><strong>载波监听</strong> ：每个主机都必须不停地监听信道。发送前监听，如果忙则等待，如果空闲则发送。</li><li><strong>碰撞检测</strong> ：即边发送边检测。若检测到信道有干扰信号，则表示产生了碰撞，于是就要停止发送数据，计算出退避等待时间，然后使用 CSMA 方法继续尝试发送。计算退避等待时间采用的是<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%8C%87%E6%95%B0%E9%80%80%E9%81%BF%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">二进制指数退避算法</a>。</li></ul><h2 id="局域网"><a class="markdownIt-Anchor" href="#局域网"></a> 局域网</h2><p>局域网 LAN（Local Area Network）是指在某一区域内由多台计算机互联成的计算机组。</p><p>局域网的拓扑结构通常为总线型和环型。</p><p>局域网技术主要有：以太网、令牌环网、FDDI 网和无线局域网等。</p><h2 id="以太网"><a class="markdownIt-Anchor" href="#以太网"></a> 以太网</h2><p>以太网（Ethernet）是一种星型拓扑结构局域网。</p><p>以太网是目前应用最广泛的局域网。</p><p>以太网使用 CSMA/CD 协议。</p><h2 id="mac-地址"><a class="markdownIt-Anchor" href="#mac-地址"></a> MAC 地址</h2><p>MAC 地址（Media Access Control Address），也称为以太网地址或物理地址，它是一个用来确认网上设备位置的地址。</p><p>MAC 地址长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。</p><p>一台主机拥有多少个网络适配器就有多少个 MAC 地址。</p><div align="center"><img src="http://dunwu.test.upcdn.net/cs/network/data-link/MAC帧.png"/></div><h2 id="设备"><a class="markdownIt-Anchor" href="#设备"></a> 设备</h2><h3 id="适配器"><a class="markdownIt-Anchor" href="#适配器"></a> 适配器</h3><p>网络适配器一般指网卡。</p><p>网卡是工作在链路层的网络组件，是局域网中连接计算机和传输介质的接口，不仅能实现与局域网传输介质之间的物理连接和电信号匹配，还涉及帧的发送与接收、帧的封装与拆封、介质访问控制、数据的编码与解码以及数据缓存的功能等。</p><p>网卡和局域网之间的通信是通过电缆或双绞线以串行传输方式进行的。而网卡和计算机之间的通信则是通过计算机主板上的 I/O 总线以并行传输方式进行。</p><h3 id="集线器"><a class="markdownIt-Anchor" href="#集线器"></a> 集线器</h3><p>集线器（Hub）的主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。</p><p>使用集线器可以在物理层扩展以太网。</p><h3 id="网桥"><a class="markdownIt-Anchor" href="#网桥"></a> 网桥</h3><p>网桥（Bridge）是早期的两端口二层网络设备，用来连接不同网段。网桥的两个端口分别有一条独立的交换信道，不是共享一条背板总线，可隔离冲突域。网桥比集线器（Hub）性能更好，集线器上各端口都是共享同一条背板总线的。后来，网桥被具有更多端口、同时也可隔离冲突域的交换机（Switch）所取代。</p><h3 id="以太网交换机"><a class="markdownIt-Anchor" href="#以太网交换机"></a> 以太网交换机</h3><p>以太网交换机是基于以太网传输数据的交换机，以太网采用共享总线型传输媒体方式的局域网。以太网交换机的结构是每个端口都直接与主机相连，并且一般都工作在全双工方式。交换机能同时连通许多对端口，使每一对相互通信的主机都能像独占通信媒体那样，进行无冲突地传输数据。</p><ul><li>以太网交换机的每个端口都直接与主机相连，并且一般都工作在全双工方式。</li><li>交换机能同时连通许多对的端口，使每一对相互通信的主机都能像独占通信媒体那样，进行无冲突地传输数据。</li><li>用户独占传输媒体的带宽，若一个接口到主机的带宽是 10Mbit 每秒，那么有 10 个接口的交换机的总容量是 100Mbit 每秒。这是交换机的最大优点。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机网络之数据链路层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络之数据链路层&quot;&gt;&lt;/a&gt; 计算机网络之数据链路层&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据链路层（Data Link Layer）&lt;/
      
    
    </summary>
    
    
      <category term="communication" scheme="https://dunwu.github.io/blog/categories/communication/"/>
    
    
      <category term="communication" scheme="https://dunwu.github.io/blog/tags/communication/"/>
    
      <category term="network" scheme="https://dunwu.github.io/blog/tags/network/"/>
    
      <category term="data link" scheme="https://dunwu.github.io/blog/tags/data-link/"/>
    
  </entry>
  
</feed>
